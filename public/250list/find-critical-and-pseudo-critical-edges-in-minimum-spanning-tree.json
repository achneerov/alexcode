{
  "filename": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
  "title": "Find Critical and Pseudo Critical Edges in Minimum Spanning Tree",
  "keywords": [
    "find",
    "critical",
    "pseudo",
    "edges",
    "minimum",
    "spanning",
    "tree",
    "leetcode",
    "1489",
    "given"
  ],
  "description": "<h2>Find Critical and Pseudo Critical Edges in Minimum Spanning Tree</h2><p>Leetcode 1489. Find Critical and Pseudo Critical Edges in Minimum Spanning Tree</p><p></p><p>You are given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [a[i], b[i], weight[i]]` represents a bidirectional and weighted edge between nodes `a[i]` and `b[i]`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.</p><p></p><p>Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.</p><p></p><p>Note that you can return the indices of the edges in any order.</p><h3>Examples:</h3><ul><li>Input: n = 4, edges = [[0,3,2],[0,2,5],[1,2,4]]<br><br>Output: [[0,2,1],[]]</li><li>Input: n = 5, edges = [[0,3,2],[0,4,2],[1,3,2],[3,4,2],[2,3,1],[1,2,3],[0,1,1]]<br><br>Output: [[4,6],[0,1,2,3]]</li></ul><h3>Constraints:</h3><ul><li> `2 <= n <= 100`</li><li> `1 <= edges.length <= min(200, n * (n - 1) / 2)`</li><li> `edges[i].length == 3`</li><li> `0 <= a[i] < b[i] < n`</li><li> `1 <= weight[i] <= 1000`</li><li> All pairs `(a[i], b[i])` are **distinct**.</li></ul>",
  "languages": {
    "python": {
      "template": "def findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(n, edges):\n    ",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "def findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root):\n    if not root:\n        return None  # or appropriate base case result\n    \n    # Process current node\n    result = root.val\n    \n    # Recursively process subtrees\n    left_result = findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.left) if root.left else None\n    right_result = findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.right) if root.right else None\n    \n    # Combine results based on operation\n    # This is a template - adjust based on specific operation\n    return result"
    },
    "javascript": {
      "template": "function findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(n, edges) {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root) {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.left) : null;\n    const rightResult = root.right ? findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "typescript": {
      "template": "function findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(n: string, edges: number[]): number[] {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root: TreeNode | null): any {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.left) : null;\n    const rightResult = root.right ? findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(String n, int[] edges) {\n        \n    }\n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "class Solution {\n    public Object findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(TreeNode root) {\n        if (root == null) return null; // or appropriate base case result\n        \n        // Process current node\n        int result = root.val;\n        \n        // Recursively process subtrees\n        Object leftResult = root.left != null ? findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.left) : null;\n        Object rightResult = root.right != null ? findCriticalAndPseudoCriticalEdgesInMinimumSpanningTree(root.right) : null;\n        \n        // Combine results based on operation\n        // This is a template - adjust based on specific operation\n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": "4,",
        "edges": [
          "[0",
          3,
          2
        ]
      },
      "output": [
        [
          0,
          2,
          1
        ],
        []
      ]
    },
    {
      "id": 2,
      "input": {
        "n": "5,",
        "edges": [
          "[0",
          3,
          2
        ]
      },
      "output": [
        [
          4,
          6
        ],
        [
          0,
          1,
          2,
          3
        ]
      ]
    }
  ]
}