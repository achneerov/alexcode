{
  "filename": "coin-change",
  "title": "Coin Change",
  "keywords": [
    "coin",
    "change",
    "leetcode",
    "322",
    "given",
    "integer",
    "array",
    "coins",
    "representing",
    "different"
  ],
  "description": "<h2>Coin Change</h2><p>Leetcode 322. Coin Change</p><p></p><p>You are given an integer array `coins` representing coins of different denominations (e.g. 1 dollar, 5 dollars, etc) and an integer `amount` representing a target amount of money.</p><p></p><p>Return the fewest number of coins that you need to make up the *exact* target amount. If it is impossible to make up the amount, return `-1`.</p><p></p><p>You may assume that you have an unlimited number of each coin.</p><h3>Examples:</h3><ul><li>Input: coins = [1,5,10], amount = 12<br><br>Output: 3<br>12 = 10 + 1 + 1. Note that we do not have to use every kind coin available.</li><li>Input: coins = [2], amount = 3<br><br>Output: -1<br>The amount of 3 cannot be made up with coins of 2.</li><li>Input: coins = [1], amount = 0<br><br>Output: 0<br>Choosing 0 coins is a valid way to make up 0.</li></ul><h3>Constraints:</h3><ul><li> `1 <= coins.length <= 10`</li><li> `1 <= coins[i] <= 2^31 - 1`</li><li> `0 <= amount <= 10000`</li></ul>",
  "languages": {
    "python": {
      "template": "def coinChange(coins, amount):\n    ",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "def coinChange(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Memoization table\n    dp = [-1] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    \n    def solve(i):\n        if dp[i] != -1:\n            return dp[i]\n        \n        # Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1) + solve(i - 2)\n        return dp[i]\n    \n    return solve(n)"
    },
    "javascript": {
      "template": "function coinChange(coins, amount) {\n  \n}",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "function coinChange(n) {\n    if (n <= 0) return 0;\n    if (n === 1) return 1;\n    \n    // Memoization table\n    const dp = new Array(n + 1).fill(-1);\n    dp[0] = 0;\n    dp[1] = 1;\n    \n    function solve(i) {\n        if (dp[i] !== -1) return dp[i];\n        \n        // Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1) + solve(i - 2);\n        return dp[i];\n    }\n    \n    return solve(n);\n}"
    },
    "typescript": {
      "template": "function coinChange(coins: number[], amount: number): number {\n  \n}",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "function coinChange(n: number): number {\n    if (n <= 0) return 0;\n    if (n === 1) return 1;\n    \n    // Memoization table\n    const dp: number[] = new Array(n + 1).fill(-1);\n    dp[0] = 0;\n    dp[1] = 1;\n    \n    function solve(i: number): number {\n        if (dp[i] !== -1) return dp[i];\n        \n        // Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1) + solve(i - 2);\n        return dp[i];\n    }\n    \n    return solve(n);\n}"
    },
    "java": {
      "template": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        \n    }\n}",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "class Solution {\n    public int coinChange(int n) {\n        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        \n        // Memoization table\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        dp[1] = 1;\n        \n        return solve(n, dp);\n    }\n    \n    private int solve(int i, int[] dp) {\n        if (dp[i] != -1) return dp[i];\n        \n        // Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1, dp) + solve(i - 2, dp);\n        return dp[i];\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "coins": [
          1,
          5,
          10
        ],
        "amount": 12
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "coins": [
          2
        ],
        "amount": 3
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "coins": [
          1
        ],
        "amount": 0
      },
      "output": 0
    }
  ]
}