{
  "filename": "kth-largest-element-in-an-array",
  "title": "Kth Largest Element in an Array",
  "keywords": [
    "kth",
    "largest",
    "element",
    "array",
    "leetcode",
    "215",
    "given",
    "unsorted",
    "integers",
    "nums"
  ],
  "description": "<h2>Kth Largest Element in an Array</h2><p>Leetcode 215. Kth Largest Element In An Array</p><p></p><p>Given an unsorted array of integers `nums` and an integer `k`, return the `kth` largest element in the array.</p><p></p><p>By `kth` largest element, we mean the `kth` largest element in the sorted order, not the `kth` distinct element.</p><p></p><p>Follow-up: Can you solve it without sorting?</p><h3>Examples:</h3><ul><li>Input: nums = [2,3,1,5,4], k = 2<br><br>Output: 4</li><li>Input: nums = [2,3,1,1,5,5,4], k = 3<br><br>Output: 4</li></ul><h3>Constraints:</h3><ul><li> `1 <= k <= nums.length <= 10000`</li><li> `-1000 <= nums[i] <= 1000`</li></ul>",
  "languages": {
    "python": {
      "template": "def kthLargestElementInAnArray(nums, k):\n    ",
      "solution_text": "Classic Binary Search implementation:\n\n**Algorithm:**\n1. Initialize left and right pointers to array bounds\n2. While left <= right, calculate middle index\n3. Compare middle element with target\n4. Adjust search space based on comparison\n\n**Time Complexity:** O(log n) - halves search space each iteration\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Requires sorted input array\n- Avoids integer overflow with left + (right - left) // 2\n- Returns -1 if target not found",
      "solution_code": "def kthLargestElementInAnArray(nums, target):\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        # Avoid integer overflow\n        mid = left + (right - left) // 2\n        \n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    "javascript": {
      "template": "function kthLargestElementInAnArray(nums, k) {\n  \n}",
      "solution_text": "Classic Binary Search implementation:\n\n**Algorithm:**\n1. Initialize left and right pointers to array bounds\n2. While left <= right, calculate middle index\n3. Compare middle element with target\n4. Adjust search space based on comparison\n\n**Time Complexity:** O(log n) - halves search space each iteration\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Requires sorted input array\n- Avoids integer overflow with left + (right - left) // 2\n- Returns -1 if target not found",
      "solution_code": "function kthLargestElementInAnArray(nums, target) {\n    let left = 0, right = nums.length - 1;\n    \n    while (left <= right) {\n        // Avoid integer overflow\n        const mid = left + Math.floor((right - left) / 2);\n        \n        if (nums[mid] === target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}"
    },
    "typescript": {
      "template": "function kthLargestElementInAnArray(nums: number[], k: number): number {\n  \n}",
      "solution_text": "Classic Binary Search implementation:\n\n**Algorithm:**\n1. Initialize left and right pointers to array bounds\n2. While left <= right, calculate middle index\n3. Compare middle element with target\n4. Adjust search space based on comparison\n\n**Time Complexity:** O(log n) - halves search space each iteration\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Requires sorted input array\n- Avoids integer overflow with left + (right - left) // 2\n- Returns -1 if target not found",
      "solution_code": "function kthLargestElementInAnArray(nums: number[], target: number): number {\n    let left = 0, right = nums.length - 1;\n    \n    while (left <= right) {\n        // Avoid integer overflow\n        const mid = left + Math.floor((right - left) / 2);\n        \n        if (nums[mid] === target) {\n            return mid;\n        } else if (nums[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int kthLargestElementInAnArray(int[] nums, int k) {\n        \n    }\n}",
      "solution_text": "Classic Binary Search implementation:\n\n**Algorithm:**\n1. Initialize left and right pointers to array bounds\n2. While left <= right, calculate middle index\n3. Compare middle element with target\n4. Adjust search space based on comparison\n\n**Time Complexity:** O(log n) - halves search space each iteration\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Requires sorted input array\n- Avoids integer overflow with left + (right - left) // 2\n- Returns -1 if target not found",
      "solution_code": "class Solution {\n    public int kthLargestElementInAnArray(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n        \n        while (left <= right) {\n            // Avoid integer overflow\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          2,
          3,
          1,
          5,
          4
        ],
        "k": 2
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          2,
          3,
          1,
          1,
          5,
          5,
          4
        ],
        "k": 3
      },
      "output": 4
    }
  ]
}