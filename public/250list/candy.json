{
  "filename": "candy",
  "title": "Candy",
  "keywords": [
    "candy",
    "leetcode",
    "135",
    "there",
    "children",
    "standing",
    "line",
    "each",
    "child",
    "assigned"
  ],
  "description": "<h2>Candy</h2><p>Leetcode 135. Candy</p><p></p><p>There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.</p><p></p><p>You are giving candies to these children subjected to the following requirements:</p><p></p><p>- Each child must have at least one candy.</p><p>- Children with a higher rating get more candies than their neighbors.</p><p></p><p>Return the **minimum** number of candies you need to have to distribute the candies to the children.</p><h3>Examples:</h3><ul><li>Input: ratings = [4,3,5]<br><br>Output: 5<br>You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</li><li>Input: ratings = [2,3,3]<br><br>Output: 4<br>You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.</li></ul><h3>Constraints:</h3><ul><li> `1 <= ratings.length <= 20,000`</li><li> `0 <= ratings[i] <= 20,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def candy(ratings):\n    ",
      "solution_text": "Candy Distribution using greedy two-pass approach:\n\n**Algorithm:**\n1. Initialize each child with 1 candy\n2. Left-to-right pass: ensure higher rated child has more than left neighbor\n3. Right-to-left pass: ensure higher rated child has more than right neighbor\n4. Take maximum from both passes\n\n**Time Complexity:** O(n) - two passes through array\n**Space Complexity:** O(n) - candy array\n\n**Key Insights:**\n- Two passes ensure all constraints are satisfied\n- Greedy approach gives minimum candies\n- Each child gets at least 1 candy",
      "solution_code": "def candy(ratings):\n    n = len(ratings)\n    candies = [1] * n\n    \n    # Left to right pass\n    for i in range(1, n):\n        if ratings[i] > ratings[i-1]:\n            candies[i] = candies[i-1] + 1\n    \n    # Right to left pass\n    for i in range(n-2, -1, -1):\n        if ratings[i] > ratings[i+1]:\n            candies[i] = max(candies[i], candies[i+1] + 1)\n    \n    return sum(candies)"
    },
    "javascript": {
      "template": "function candy(ratings) {\n  \n}",
      "solution_text": "Candy Distribution using greedy two-pass approach:\n\n**Algorithm:**\n1. Initialize each child with 1 candy\n2. Left-to-right pass: ensure higher rated child has more than left neighbor\n3. Right-to-left pass: ensure higher rated child has more than right neighbor\n4. Take maximum from both passes\n\n**Time Complexity:** O(n) - two passes through array\n**Space Complexity:** O(n) - candy array\n\n**Key Insights:**\n- Two passes ensure all constraints are satisfied\n- Greedy approach gives minimum candies\n- Each child gets at least 1 candy",
      "solution_code": "function candy(ratings) {\n    const n = ratings.length;\n    const candies = new Array(n).fill(1);\n    \n    // Left to right pass\n    for (let i = 1; i < n; i++) {\n        if (ratings[i] > ratings[i-1]) {\n            candies[i] = candies[i-1] + 1;\n        }\n    }\n    \n    // Right to left pass\n    for (let i = n-2; i >= 0; i--) {\n        if (ratings[i] > ratings[i+1]) {\n            candies[i] = Math.max(candies[i], candies[i+1] + 1);\n        }\n    }\n    \n    return candies.reduce((sum, candy) => sum + candy, 0);\n}"
    },
    "typescript": {
      "template": "function candy(ratings: number[]): number {\n  \n}",
      "solution_text": "Candy Distribution using greedy two-pass approach:\n\n**Algorithm:**\n1. Initialize each child with 1 candy\n2. Left-to-right pass: ensure higher rated child has more than left neighbor\n3. Right-to-left pass: ensure higher rated child has more than right neighbor\n4. Take maximum from both passes\n\n**Time Complexity:** O(n) - two passes through array\n**Space Complexity:** O(n) - candy array\n\n**Key Insights:**\n- Two passes ensure all constraints are satisfied\n- Greedy approach gives minimum candies\n- Each child gets at least 1 candy",
      "solution_code": "function candy(ratings: number[]): number {\n    const n = ratings.length;\n    const candies = new Array(n).fill(1);\n    \n    // Left to right pass\n    for (let i = 1; i < n; i++) {\n        if (ratings[i] > ratings[i-1]) {\n            candies[i] = candies[i-1] + 1;\n        }\n    }\n    \n    // Right to left pass\n    for (let i = n-2; i >= 0; i--) {\n        if (ratings[i] > ratings[i+1]) {\n            candies[i] = Math.max(candies[i], candies[i+1] + 1);\n        }\n    }\n    \n    return candies.reduce((sum, candy) => sum + candy, 0);\n}"
    },
    "java": {
      "template": "class Solution {\n    public int candy(int[] ratings) {\n        \n    }\n}",
      "solution_text": "Candy Distribution using greedy two-pass approach:\n\n**Algorithm:**\n1. Initialize each child with 1 candy\n2. Left-to-right pass: ensure higher rated child has more than left neighbor\n3. Right-to-left pass: ensure higher rated child has more than right neighbor\n4. Take maximum from both passes\n\n**Time Complexity:** O(n) - two passes through array\n**Space Complexity:** O(n) - candy array\n\n**Key Insights:**\n- Two passes ensure all constraints are satisfied\n- Greedy approach gives minimum candies\n- Each child gets at least 1 candy",
      "solution_code": "class Solution {\n    public int candy(int[] ratings) {\n        int n = ratings.length;\n        int[] candies = new int[n];\n        Arrays.fill(candies, 1);\n        \n        // Left to right pass\n        for (int i = 1; i < n; i++) {\n            if (ratings[i] > ratings[i-1]) {\n                candies[i] = candies[i-1] + 1;\n            }\n        }\n        \n        // Right to left pass\n        for (int i = n-2; i >= 0; i--) {\n            if (ratings[i] > ratings[i+1]) {\n                candies[i] = Math.max(candies[i], candies[i+1] + 1);\n            }\n        }\n        \n        int total = 0;\n        for (int candy : candies) {\n            total += candy;\n        }\n        return total;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "ratings": [
          4,
          3,
          5
        ]
      },
      "output": 5
    },
    {
      "id": 2,
      "input": {
        "ratings": [
          2,
          3,
          3
        ]
      },
      "output": 4
    }
  ]
}