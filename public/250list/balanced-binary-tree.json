{
  "filename": "balanced-binary-tree",
  "title": "Balanced Binary Tree",
  "keywords": [
    "balanced",
    "binary",
    "tree",
    "leetcode",
    "110",
    "given",
    "return",
    "true",
    "height",
    "false"
  ],
  "description": "<h2>Balanced Binary Tree</h2><p>Leetcode 110. Balanced Binary Tree</p><p></p><p>Given a binary tree, return `true` if it is **height-balanced** and `false` otherwise.</p><p></p><p>A **height-balanced** binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1.</p><h3>Examples:</h3><ul><li>Input: root = []<br><br>Output: true</li></ul><h3>Constraints:</h3><ul><li> The number of nodes in the tree is in the range `[0, 1000]`.</li><li> `-1000 <= Node.val <= 1000`</li></ul>",
  "languages": {
    "python": {
      "template": "def balancedBinaryTree(root):\n    ",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "def balancedBinaryTree(root):\n    if not root:\n        return None  # or appropriate base case result\n    \n    # Process current node\n    result = root.val\n    \n    # Recursively process subtrees\n    left_result = balancedBinaryTree(root.left) if root.left else None\n    right_result = balancedBinaryTree(root.right) if root.right else None\n    \n    # Combine results based on operation\n    # This is a template - adjust based on specific operation\n    return result"
    },
    "javascript": {
      "template": "function balancedBinaryTree(root) {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function balancedBinaryTree(root) {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? balancedBinaryTree(root.left) : null;\n    const rightResult = root.right ? balancedBinaryTree(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "typescript": {
      "template": "function balancedBinaryTree(root: number[]): string {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function balancedBinaryTree(root: TreeNode | null): any {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? balancedBinaryTree(root.left) : null;\n    const rightResult = root.right ? balancedBinaryTree(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public String balancedBinaryTree(int[] root) {\n        \n    }\n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "class Solution {\n    public Object balancedBinaryTree(TreeNode root) {\n        if (root == null) return null; // or appropriate base case result\n        \n        // Process current node\n        int result = root.val;\n        \n        // Recursively process subtrees\n        Object leftResult = root.left != null ? balancedBinaryTree(root.left) : null;\n        Object rightResult = root.right != null ? balancedBinaryTree(root.right) : null;\n        \n        // Combine results based on operation\n        // This is a template - adjust based on specific operation\n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": []
      },
      "output": "true"
    }
  ]
}