{
  "filename": "merge-triplets-to-form-target",
  "title": "Merge Triplets to Form Target",
  "keywords": [
    "merge",
    "triplets",
    "form",
    "target",
    "leetcode",
    "1899",
    "triplet",
    "given",
    "array",
    "integers"
  ],
  "description": "<h2>Merge Triplets to Form Target</h2><p>Leetcode 1899. Merge Triplets to Form Target Triplet</p><p></p><p>You are given a 2D array of integers `triplets`, where `triplets[i] = [ai, bi, ci]` represents the `ith` **triplet**. You are also given an array of integers `target = [x, y, z]` which is the triplet we want to obtain.</p><p>    </p><p>To obtain `target`, you may apply the following operation on `triplets` zero or more times:</p><p></p><p>Choose two **different** triplets `triplets[i]` and `triplets[j]` and update `triplets[j]` to become `[max(ai, aj), max(bi, bj), max(ci, cj)]`.</p><p>    * E.g. if `triplets[i] = [1, 3, 1]` and `triplets[j] = [2, 1, 2]`, `triplets[j]` will be updated to `[max(1, 2), max(3, 1), max(1, 2)] = [2, 3, 2]`.</p><p></p><p>Return `true` if it is possible to obtain `target` as an **element** of `triplets`, or `false` otherwise.</p><h3>Examples:</h3><ul><li>Input: triplets = [[1,2,3],[7,1,1]], target = [7,2,3]<br><br>Output: true<br>Choose the first and second triplets, update the second triplet to be [max(1, 7), max(2, 1), max(3, 1)] = [7, 2, 3].</li><li>Input: triplets = [[2,5,6],[1,4,4],[5,7,5]], target = [5,4,6]<br><br>Output: false</li></ul><h3>Constraints:</h3><ul><li> `1 <= triplets.length <= 1000`</li><li> `1 <= ai, bi, ci, x, y, z <= 100`</li></ul>",
  "languages": {
    "python": {
      "template": "def mergeTripletsToFormTarget(triplets, target):\n    ",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "def mergeTripletsToFormTarget(arr1, arr2):\n    if not arr1:\n        return arr2\n    if not arr2:\n        return arr1\n    \n    result = []\n    i, j = 0, 0\n    \n    # Merge while both arrays have elements\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    \n    # Add remaining elements\n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n    \n    return result"
    },
    "javascript": {
      "template": "function mergeTripletsToFormTarget(triplets, target) {\n  \n}",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "function mergeTripletsToFormTarget(arr1, arr2) {\n    if (!arr1) return arr2;\n    if (!arr2) return arr1;\n    \n    const result = [];\n    let i = 0, j = 0;\n    \n    // Merge while both arrays have elements\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    \n    // Add remaining elements\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n    \n    return result;\n}"
    },
    "typescript": {
      "template": "function mergeTripletsToFormTarget(triplets: number[], target: number[]): string {\n  \n}",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "function mergeTripletsToFormTarget(arr1: number[], arr2: number[]): number[] {\n    if (!arr1) return arr2;\n    if (!arr2) return arr1;\n    \n    const result: number[] = [];\n    let i = 0, j = 0;\n    \n    // Merge while both arrays have elements\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n        } else {\n            result.push(arr2[j]);\n            j++;\n        }\n    }\n    \n    // Add remaining elements\n    while (i < arr1.length) {\n        result.push(arr1[i]);\n        i++;\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j]);\n        j++;\n    }\n    \n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public String mergeTripletsToFormTarget(int[] triplets, int[] target) {\n        \n    }\n}",
      "solution_text": "Merge algorithm using two pointers:\n\n**Algorithm:**\n1. Use two pointers for both input arrays\n2. Compare elements and add smaller to result\n3. Continue until one array is exhausted\n4. Append remaining elements from other array\n\n**Time Complexity:** O(m + n) - visit each element once\n**Space Complexity:** O(m + n) - result array size\n\n**Key Insights:**\n- Two pointers technique for sorted arrays\n- Handle arrays of different lengths\n- Maintains sorted order in result",
      "solution_code": "class Solution {\n    public int[] mergeTripletsToFormTarget(int[] arr1, int[] arr2) {\n        if (arr1 == null || arr1.length == 0) return arr2;\n        if (arr2 == null || arr2.length == 0) return arr1;\n        \n        int[] result = new int[arr1.length + arr2.length];\n        int i = 0, j = 0, k = 0;\n        \n        // Merge while both arrays have elements\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] <= arr2[j]) {\n                result[k++] = arr1[i++];\n            } else {\n                result[k++] = arr2[j++];\n            }\n        }\n        \n        // Add remaining elements\n        while (i < arr1.length) {\n            result[k++] = arr1[i++];\n        }\n        while (j < arr2.length) {\n            result[k++] = arr2[j++];\n        }\n        \n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "triplets": [
          "[1",
          2,
          3
        ],
        "target": [
          7,
          2,
          3
        ]
      },
      "output": "true"
    },
    {
      "id": 2,
      "input": {
        "triplets": [
          "[2",
          5,
          6
        ],
        "target": [
          5,
          4,
          6
        ]
      },
      "output": "false"
    }
  ]
}