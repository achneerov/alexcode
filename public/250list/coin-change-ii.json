{
  "filename": "coin-change-ii",
  "title": "Coin Change II",
  "keywords": [
    "coin",
    "change",
    "leetcode",
    "518",
    "given",
    "integer",
    "array",
    "coins",
    "representing",
    "different"
  ],
  "description": "<h2>Coin Change II</h2><p>Leetcode 518. Coin Change II</p><p></p><p>You are given an integer array `coins` representing coins of different denominations (e.g. 1 dollar, 5 dollars, etc) and an integer `amount` representing a target amount of money.</p><p></p><p>Return the number of distinct combinations that total up to `amount`. If it's impossible to make up the amount, return `0`.</p><p></p><p>You may assume that you have an unlimited number of each coin and that each value in `coins` is unique.</p><h3>Examples:</h3><ul><li>Input: amount = 4, coins = [1,2,3]<br><br>Output: 4<br>* 1+1+1+1 = 4\n* 1+1+2 = 4\n* 2+2 = 4\n* 1+3 = 4</li><li>Input: amount = 7, coins = [2,4]<br><br>Output: 0</li></ul><h3>Constraints:</h3><ul><li> `1 <= coins.length <= 100`</li><li> `1 <= coins[i] <= 5000`</li><li> `0 <= amount <= 5000`</li></ul>",
  "languages": {
    "python": {
      "template": "def coinChangeIi(amount, coins):\n    ",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "def coinChangeIi(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Memoization table\n    dp = [-1] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    \n    def solve(i):\n        if dp[i] != -1:\n            return dp[i]\n        \n        # Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1) + solve(i - 2)\n        return dp[i]\n    \n    return solve(n)"
    },
    "javascript": {
      "template": "function coinChangeIi(amount, coins) {\n  \n}",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "function coinChangeIi(n) {\n    if (n <= 0) return 0;\n    if (n === 1) return 1;\n    \n    // Memoization table\n    const dp = new Array(n + 1).fill(-1);\n    dp[0] = 0;\n    dp[1] = 1;\n    \n    function solve(i) {\n        if (dp[i] !== -1) return dp[i];\n        \n        // Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1) + solve(i - 2);\n        return dp[i];\n    }\n    \n    return solve(n);\n}"
    },
    "typescript": {
      "template": "function coinChangeIi(amount: string, coins: number[]): number {\n  \n}",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "function coinChangeIi(n: number): number {\n    if (n <= 0) return 0;\n    if (n === 1) return 1;\n    \n    // Memoization table\n    const dp: number[] = new Array(n + 1).fill(-1);\n    dp[0] = 0;\n    dp[1] = 1;\n    \n    function solve(i: number): number {\n        if (dp[i] !== -1) return dp[i];\n        \n        // Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1) + solve(i - 2);\n        return dp[i];\n    }\n    \n    return solve(n);\n}"
    },
    "java": {
      "template": "class Solution {\n    public int coinChangeIi(String amount, int[] coins) {\n        \n    }\n}",
      "solution_text": "Dynamic Programming solution with memoization:\n\n**Algorithm:**\n1. Identify overlapping subproblems\n2. Define state and recurrence relation\n3. Use memoization to avoid recomputation\n4. Build solution bottom-up or top-down\n\n**Time Complexity:** O(n) with memoization\n**Space Complexity:** O(n) for memoization table\n\n**Key Insights:**\n- Break problem into smaller subproblems\n- Optimal substructure property\n- Memoization prevents redundant calculations",
      "solution_code": "class Solution {\n    public int coinChangeIi(int n) {\n        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        \n        // Memoization table\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        dp[1] = 1;\n        \n        return solve(n, dp);\n    }\n    \n    private int solve(int i, int[] dp) {\n        if (dp[i] != -1) return dp[i];\n        \n        // Recurrence relation (adjust based on problem)\n        dp[i] = solve(i - 1, dp) + solve(i - 2, dp);\n        return dp[i];\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "amount": "4,",
        "coins": [
          1,
          2,
          3
        ]
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "amount": "7,",
        "coins": [
          2,
          4
        ]
      },
      "output": 0
    }
  ]
}