{
  "filename": "buy-and-sell-crypto",
  "title": "Best Time to Buy and Sell Stock",
  "keywords": [
    "best",
    "time",
    "buy",
    "sell",
    "stock",
    "leetcode",
    "121",
    "given",
    "integer",
    "array"
  ],
  "description": "<h2>Best Time to Buy and Sell Stock</h2><p>Leetcode 121. Best Time to Buy And Sell Stock</p><p></p><p>You are given an integer array `prices` where `prices[i]` is the price of NeetCoin on the `ith` day.</p><p></p><p>You may choose a **single day** to buy one NeetCoin and choose a **different day in the future** to sell it.</p><p></p><p>Return the maximum profit you can achieve. You may choose to **not make any transactions**, in which case the profit would be `0`.</p><h3>Examples:</h3><ul><li>Input: prices = [10,1,5,6,7,1]<br><br>Output: 6<br>Buy `prices[1]` and sell `prices[4]`, `profit = 7 - 1 = 6`.</li><li>Input: prices = [10,8,7,5,2]<br><br>Output: 0<br>No profitable transactions can be made, thus the max profit is 0.</li></ul><h3>Constraints:</h3><ul><li> `1 <= prices.length <= 100`</li><li> `0 <= prices[i] <= 100`</li></ul>",
  "languages": {
    "python": {
      "template": "def bestTimeToBuyAndSellStock(prices):\n    ",
      "solution_text": "Optimal solution for Buy and Sell Stock problem:\n\n**Algorithm:**\n1. Track minimum price seen so far\n2. For each price, calculate profit if sold today\n3. Update maximum profit if current profit is higher\n4. Update minimum price if current price is lower\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Buy at lowest price before current day\n- Sell at current day for maximum profit\n- One pass solution with two variables",
      "solution_code": "def buyAndSellCrypto(prices):\n    if not prices or len(prices) < 2:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for price in prices[1:]:\n        # Calculate profit if we sell today\n        profit = price - min_price\n        max_profit = max(max_profit, profit)\n        \n        # Update minimum price seen so far\n        min_price = min(min_price, price)\n    \n    return max_profit"
    },
    "javascript": {
      "template": "function bestTimeToBuyAndSellStock(prices) {\n  \n}",
      "solution_text": "Optimal solution for Buy and Sell Stock problem:\n\n**Algorithm:**\n1. Track minimum price seen so far\n2. For each price, calculate profit if sold today\n3. Update maximum profit if current profit is higher\n4. Update minimum price if current price is lower\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Buy at lowest price before current day\n- Sell at current day for maximum profit\n- One pass solution with two variables",
      "solution_code": "function buyAndSellCrypto(prices) {\n    if (!prices || prices.length < 2) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        // Calculate profit if we sell today\n        const profit = prices[i] - minPrice;\n        maxProfit = Math.max(maxProfit, profit);\n        \n        // Update minimum price seen so far\n        minPrice = Math.min(minPrice, prices[i]);\n    }\n    \n    return maxProfit;\n}"
    },
    "typescript": {
      "template": "function bestTimeToBuyAndSellStock(prices: number[]): number {\n  \n}",
      "solution_text": "Optimal solution for Buy and Sell Stock problem:\n\n**Algorithm:**\n1. Track minimum price seen so far\n2. For each price, calculate profit if sold today\n3. Update maximum profit if current profit is higher\n4. Update minimum price if current price is lower\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Buy at lowest price before current day\n- Sell at current day for maximum profit\n- One pass solution with two variables",
      "solution_code": "function buyAndSellCrypto(prices: number[]): number {\n    if (!prices || prices.length < 2) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        // Calculate profit if we sell today\n        const profit = prices[i] - minPrice;\n        maxProfit = Math.max(maxProfit, profit);\n        \n        // Update minimum price seen so far\n        minPrice = Math.min(minPrice, prices[i]);\n    }\n    \n    return maxProfit;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int bestTimeToBuyAndSellStock(int[] prices) {\n        \n    }\n}",
      "solution_text": "Optimal solution for Buy and Sell Stock problem:\n\n**Algorithm:**\n1. Track minimum price seen so far\n2. For each price, calculate profit if sold today\n3. Update maximum profit if current profit is higher\n4. Update minimum price if current price is lower\n\n**Time Complexity:** O(n) - single pass through prices\n**Space Complexity:** O(1) - constant extra space\n\n**Key Insights:**\n- Buy at lowest price before current day\n- Sell at current day for maximum profit\n- One pass solution with two variables",
      "solution_code": "class Solution {\n    public int buyAndSellCrypto(int[] prices) {\n        if (prices == null || prices.length < 2) return 0;\n        \n        int minPrice = prices[0];\n        int maxProfit = 0;\n        \n        for (int i = 1; i < prices.length; i++) {\n            // Calculate profit if we sell today\n            int profit = prices[i] - minPrice;\n            maxProfit = Math.max(maxProfit, profit);\n            \n            // Update minimum price seen so far\n            minPrice = Math.min(minPrice, prices[i]);\n        }\n        \n        return maxProfit;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "prices": [
          10,
          1,
          5,
          6,
          7,
          1
        ]
      },
      "output": 6
    },
    {
      "id": 2,
      "input": {
        "prices": [
          10,
          8,
          7,
          5,
          2
        ]
      },
      "output": 0
    }
  ]
}