{
  "filename": "longest-consecutive-sequence",
  "title": "Longest Consecutive Sequence",
  "keywords": [
    "longest",
    "consecutive",
    "sequence",
    "hashset",
    "union",
    "find"
  ],
  "description": "<h2>Longest Consecutive Sequence</h2><p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p><p>You must write an algorithm that runs in <code>O(n)</code> time.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [100,4,200,1,3,2]<br>Output: 4<br>Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</li><li><strong>Example 2:</strong><br>Input: nums = [0,3,7,2,5,8,4,6,0,1]<br>Output: 9</li></ul><h3>Constraints:</h3><ul><li>0 <= nums.length <= 10<sup>5</sup></li><li>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def longestConsecutive(nums):\n    ",
      "solution_text": "Use hash set for O(1) lookup. For each number, check if it's the start of a sequence and count consecutive numbers.",
      "solution_code": "def longestConsecutive(nums):\n    if not nums:\n        return 0\n    \n    num_set = set(nums)\n    longest = 0\n    \n    for num in num_set:\n        # Check if this is the start of a sequence\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            # Count consecutive numbers\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            longest = max(longest, current_length)\n    \n    return longest"
    },
    "javascript": {
      "template": "function longestConsecutive(nums) {\n  \n}",
      "solution_text": "Use hash set for O(1) lookup. For each number, check if it's the start of a sequence and count consecutive numbers.",
      "solution_code": "function longestConsecutive(nums) {\n    if (nums.length === 0) return 0;\n    \n    const numSet = new Set(nums);\n    let longest = 0;\n    \n    for (const num of numSet) {\n        // Check if this is the start of a sequence\n        if (!numSet.has(num - 1)) {\n            let currentNum = num;\n            let currentLength = 1;\n            \n            // Count consecutive numbers\n            while (numSet.has(currentNum + 1)) {\n                currentNum++;\n                currentLength++;\n            }\n            \n            longest = Math.max(longest, currentLength);\n        }\n    }\n    \n    return longest;\n}"
    },
    "typescript": {
      "template": "function longestConsecutive(nums: number[]): number {\n  \n}",
      "solution_text": "Use hash set for O(1) lookup. For each number, check if it's the start of a sequence and count consecutive numbers.",
      "solution_code": "function longestConsecutive(nums: number[]): number {\n    if (nums.length === 0) return 0;\n    \n    const numSet = new Set(nums);\n    let longest = 0;\n    \n    for (const num of numSet) {\n        // Check if this is the start of a sequence\n        if (!numSet.has(num - 1)) {\n            let currentNum = num;\n            let currentLength = 1;\n            \n            // Count consecutive numbers\n            while (numSet.has(currentNum + 1)) {\n                currentNum++;\n                currentLength++;\n            }\n            \n            longest = Math.max(longest, currentLength);\n        }\n    }\n    \n    return longest;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}",
      "solution_text": "Use hash set for O(1) lookup. For each number, check if it's the start of a sequence and count consecutive numbers.",
      "solution_code": "class Solution {\n    public int longestConsecutive(int[] nums) {\n        if (nums.length == 0) return 0;\n        \n        Set<Integer> numSet = new HashSet<>();\n        for (int num : nums) {\n            numSet.add(num);\n        }\n        \n        int longest = 0;\n        \n        for (int num : numSet) {\n            // Check if this is the start of a sequence\n            if (!numSet.contains(num - 1)) {\n                int currentNum = num;\n                int currentLength = 1;\n                \n                // Count consecutive numbers\n                while (numSet.contains(currentNum + 1)) {\n                    currentNum++;\n                    currentLength++;\n                }\n                \n                longest = Math.max(longest, currentLength);\n            }\n        }\n        \n        return longest;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          100,
          4,
          200,
          1,
          3,
          2
        ]
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          0,
          3,
          7,
          2,
          5,
          8,
          4,
          6,
          0,
          1
        ]
      },
      "output": 9
    }
  ]
}