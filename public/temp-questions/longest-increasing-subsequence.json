{
  "filename": "longest-increasing-subsequence",
  "title": "Longest Increasing Subsequence",
  "keywords": [
    "longest",
    "increasing",
    "subsequence",
    "dynamic",
    "programming",
    "binary",
    "search"
  ],
  "description": "<h2>Longest Increasing Subsequence</h2><p>Given an integer array <code>nums</code>, return the length of the longest strictly increasing subsequence.</p><p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [10,9,2,5,3,7,101,18]<br>Output: 4<br>Explanation: The longest increasing subsequence is [2,3,7,18], therefore the length is 4.</li><li><strong>Example 2:</strong><br>Input: nums = [0,1,0,3,2,3]<br>Output: 4</li><li><strong>Example 3:</strong><br>Input: nums = [7,7,7,7,7,7,7]<br>Output: 1</li></ul><h3>Constraints:</h3><ul><li>1 <= nums.length <= 2500</li><li>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def lengthOfLIS(nums):\n    ",
      "solution_text": "Use dynamic programming where dp[i] represents the length of LIS ending at index i. For each element, check all previous elements.",
      "solution_code": "def lengthOfLIS(nums):\n    if not nums:\n        return 0\n    \n    dp = [1] * len(nums)\n    \n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)"
    },
    "javascript": {
      "template": "function lengthOfLIS(nums) {\n  \n}",
      "solution_text": "Use dynamic programming where dp[i] represents the length of LIS ending at index i. For each element, check all previous elements.",
      "solution_code": "function lengthOfLIS(nums) {\n    if (nums.length === 0) return 0;\n    \n    const dp = new Array(nums.length).fill(1);\n    \n    for (let i = 1; i < nums.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (nums[j] < nums[i]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    \n    return Math.max(...dp);\n}"
    },
    "typescript": {
      "template": "function lengthOfLIS(nums: number[]): number {\n  \n}",
      "solution_text": "Use dynamic programming where dp[i] represents the length of LIS ending at index i. For each element, check all previous elements.",
      "solution_code": "function lengthOfLIS(nums: number[]): number {\n    if (nums.length === 0) return 0;\n    \n    const dp = new Array(nums.length).fill(1);\n    \n    for (let i = 1; i < nums.length; i++) {\n        for (let j = 0; j < i; j++) {\n            if (nums[j] < nums[i]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    \n    return Math.max(...dp);\n}"
    },
    "java": {
      "template": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n    }\n}",
      "solution_text": "Use dynamic programming where dp[i] represents the length of LIS ending at index i. For each element, check all previous elements.",
      "solution_code": "class Solution {\n    public int lengthOfLIS(int[] nums) {\n        if (nums.length == 0) return 0;\n        \n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        \n        for (int i = 1; i < nums.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        \n        return Arrays.stream(dp).max().getAsInt();\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          10,
          9,
          2,
          5,
          3,
          7,
          101,
          18
        ]
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          0,
          1,
          0,
          3,
          2,
          3
        ]
      },
      "output": 4
    },
    {
      "id": 3,
      "input": {
        "nums": [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      },
      "output": 1
    }
  ]
}