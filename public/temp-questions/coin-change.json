{
  "filename": "coin-change",
  "title": "Coin Change",
  "keywords": [
    "coin",
    "change",
    "dynamic",
    "programming",
    "minimum",
    "fewest"
  ],
  "description": "<h2>Coin Change</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: coins = [1,3,4], amount = 6<br>Output: 2<br>Explanation: 6 = 3 + 3</li><li><strong>Example 2:</strong><br>Input: coins = [2], amount = 3<br>Output: -1</li><li><strong>Example 3:</strong><br>Input: coins = [1], amount = 0<br>Output: 0</li></ul><h3>Constraints:</h3><ul><li>1 <= coins.length <= 12</li><li>1 <= coins[i] <= 2<sup>31</sup> - 1</li><li>0 <= amount <= 10<sup>4</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def coinChange(coins, amount):\n    ",
      "solution_text": "Use dynamic programming. dp[i] represents the minimum coins needed for amount i.",
      "solution_code": "def coinChange(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1"
    },
    "javascript": {
      "template": "function coinChange(coins, amount) {\n  \n}",
      "solution_text": "Use dynamic programming. dp[i] represents the minimum coins needed for amount i.",
      "solution_code": "function coinChange(coins, amount) {\n    const dp = new Array(amount + 1).fill(Infinity);\n    dp[0] = 0;\n    \n    for (let i = 1; i <= amount; i++) {\n        for (const coin of coins) {\n            if (coin <= i) {\n                dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n            }\n        }\n    }\n    \n    return dp[amount] === Infinity ? -1 : dp[amount];\n}"
    },
    "typescript": {
      "template": "function coinChange(coins: number[], amount: number): number {\n  \n}",
      "solution_text": "Use dynamic programming. dp[i] represents the minimum coins needed for amount i.",
      "solution_code": "function coinChange(coins: number[], amount: number): number {\n    const dp = new Array(amount + 1).fill(Infinity);\n    dp[0] = 0;\n    \n    for (let i = 1; i <= amount; i++) {\n        for (const coin of coins) {\n            if (coin <= i) {\n                dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n            }\n        }\n    }\n    \n    return dp[amount] === Infinity ? -1 : dp[amount];\n}"
    },
    "java": {
      "template": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        \n    }\n}",
      "solution_text": "Use dynamic programming. dp[i] represents the minimum coins needed for amount i.",
      "solution_code": "class Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        for (int i = 1; i <= amount; i++) {\n            for (int coin : coins) {\n                if (coin <= i && dp[i - coin] != Integer.MAX_VALUE) {\n                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n                }\n            }\n        }\n        \n        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "coins": [
          1,
          3,
          4
        ],
        "amount": 6
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "coins": [
          2
        ],
        "amount": 3
      },
      "output": -1
    },
    {
      "id": 3,
      "input": {
        "coins": [
          1
        ],
        "amount": 0
      },
      "output": 0
    }
  ]
}