{
  "filename": "invert-binary-tree",
  "title": "Invert Binary Tree",
  "keywords": [
    "invert",
    "binary",
    "tree",
    "recursive",
    "swap",
    "children"
  ],
  "description": "<h2>Invert Binary Tree</h2><p>Given the <code>root</code> of a binary tree, invert the tree, and return its root.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: root = [4,2,7,1,3,6,9]<br>Output: [4,7,2,9,6,3,1]</li><li><strong>Example 2:</strong><br>Input: root = [2,1,3]<br>Output: [2,3,1]</li><li><strong>Example 3:</strong><br>Input: root = []<br>Output: []</li></ul><h3>Constraints:</h3><ul><li>The number of nodes in the tree is in the range [0, 100].</li><li>-100 <= Node.val <= 100</li></ul>",
  "languages": {
    "python": {
      "template": "def invertTree(root):\n    ",
      "solution_text": "Recursively swap the left and right children of each node.",
      "solution_code": "def invertTree(root):\n    if not root:\n        return None\n    \n    # Swap left and right children\n    root.left, root.right = root.right, root.left\n    \n    # Recursively invert subtrees\n    invertTree(root.left)\n    invertTree(root.right)\n    \n    return root"
    },
    "javascript": {
      "template": "function invertTree(root) {\n  \n}",
      "solution_text": "Recursively swap the left and right children of each node.",
      "solution_code": "function invertTree(root) {\n    if (!root) return null;\n    \n    // Swap left and right children\n    [root.left, root.right] = [root.right, root.left];\n    \n    // Recursively invert subtrees\n    invertTree(root.left);\n    invertTree(root.right);\n    \n    return root;\n}"
    },
    "typescript": {
      "template": "function invertTree(root: TreeNode | null): TreeNode | null {\n  \n}",
      "solution_text": "Recursively swap the left and right children of each node.",
      "solution_code": "function invertTree(root: TreeNode | null): TreeNode | null {\n    if (!root) return null;\n    \n    // Swap left and right children\n    [root.left, root.right] = [root.right, root.left];\n    \n    // Recursively invert subtrees\n    invertTree(root.left);\n    invertTree(root.right);\n    \n    return root;\n}"
    },
    "java": {
      "template": "class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        \n    }\n}",
      "solution_text": "Recursively swap the left and right children of each node.",
      "solution_code": "class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if (root == null) return null;\n        \n        // Swap left and right children\n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        \n        // Recursively invert subtrees\n        invertTree(root.left);\n        invertTree(root.right);\n        \n        return root;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": [
          4,
          2,
          7,
          1,
          3,
          6,
          9
        ]
      },
      "output": [
        4,
        7,
        2,
        9,
        6,
        3,
        1
      ]
    },
    {
      "id": 2,
      "input": {
        "root": [
          2,
          1,
          3
        ]
      },
      "output": [
        2,
        3,
        1
      ]
    },
    {
      "id": 3,
      "input": {
        "root": []
      },
      "output": []
    }
  ]
}