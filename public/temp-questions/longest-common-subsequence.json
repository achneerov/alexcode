{
  "filename": "longest-common-subsequence",
  "title": "Longest Common Subsequence",
  "keywords": [
    "longest",
    "common",
    "subsequence",
    "dynamic",
    "programming",
    "strings"
  ],
  "description": "<h2>Longest Common Subsequence</h2><p>Given two strings <code>text1</code> and <code>text2</code>, return <em>the length of their longest <strong>common subsequence</strong></em>. If there is no <strong>common subsequence</strong>, return <code>0</code>.</p><p>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p><ul><li>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</li></ul><p>A <strong>common subsequence</strong> of two strings is a subsequence that is common to both strings.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: text1 = \"abcde\", text2 = \"ace\"<br>Output: 3<br>Explanation: The longest common subsequence is \"ace\" and its length is 3.</li><li><strong>Example 2:</strong><br>Input: text1 = \"abc\", text2 = \"abc\"<br>Output: 3<br>Explanation: The longest common subsequence is \"abc\" and its length is 3.</li><li><strong>Example 3:</strong><br>Input: text1 = \"abc\", text2 = \"def\"<br>Output: 0<br>Explanation: There is no such common subsequence, so the result is 0.</li></ul><h3>Constraints:</h3><ul><li>1 <= text1.length, text2.length <= 1000</li><li>text1 and text2 consist of only lowercase English characters.</li></ul>",
  "languages": {
    "python": {
      "template": "def longestCommonSubsequence(text1, text2):\n    ",
      "solution_text": "Use 2D DP where dp[i][j] represents LCS length of text1[0:i] and text2[0:j]. If characters match, add 1 to diagonal; otherwise take max of left and top.",
      "solution_code": "def longestCommonSubsequence(text1, text2):\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i-1] == text2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]"
    },
    "javascript": {
      "template": "function longestCommonSubsequence(text1, text2) {\n  \n}",
      "solution_text": "Use 2D DP where dp[i][j] represents LCS length of text1[0:i] and text2[0:j]. If characters match, add 1 to diagonal; otherwise take max of left and top.",
      "solution_code": "function longestCommonSubsequence(text1, text2) {\n    const m = text1.length;\n    const n = text2.length;\n    const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));\n    \n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (text1[i-1] === text2[j-1]) {\n                dp[i][j] = dp[i-1][j-1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"
    },
    "typescript": {
      "template": "function longestCommonSubsequence(text1: string, text2: string): number {\n  \n}",
      "solution_text": "Use 2D DP where dp[i][j] represents LCS length of text1[0:i] and text2[0:j]. If characters match, add 1 to diagonal; otherwise take max of left and top.",
      "solution_code": "function longestCommonSubsequence(text1: string, text2: string): number {\n    const m = text1.length;\n    const n = text2.length;\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n    \n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (text1[i-1] === text2[j-1]) {\n                dp[i][j] = dp[i-1][j-1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n            }\n        }\n    }\n    \n    return dp[m][n];\n}"
    },
    "java": {
      "template": "class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        \n    }\n}",
      "solution_text": "Use 2D DP where dp[i][j] represents LCS length of text1[0:i] and text2[0:j]. If characters match, add 1 to diagonal; otherwise take max of left and top.",
      "solution_code": "class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int m = text1.length();\n        int n = text2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        \n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (text1.charAt(i-1) == text2.charAt(j-1)) {\n                    dp[i][j] = dp[i-1][j-1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n                }\n            }\n        }\n        \n        return dp[m][n];\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "text1": "abcde",
        "text2": "ace"
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "text1": "abc",
        "text2": "abc"
      },
      "output": 3
    },
    {
      "id": 3,
      "input": {
        "text1": "abc",
        "text2": "def"
      },
      "output": 0
    }
  ]
}