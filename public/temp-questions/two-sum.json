{
  "filename": "two-sum",
  "title": "Two Sum",
  "keywords": ["two", "sum", "array", "integers", "target", "indices", "hashmap", "hash", "table", "complement"],
  "description": "<h2>Two Sum</h2><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [2,7,11,15], target = 9<br>Output: [0,1]<br>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</li><li><strong>Example 2:</strong><br>Input: nums = [3,2,4], target = 6<br>Output: [1,2]</li><li><strong>Example 3:</strong><br>Input: nums = [3,3], target = 6<br>Output: [0,1]</li></ul><h3>Constraints:</h3><ul><li>2 <= nums.length <= 10<sup>4</sup></li><li>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></li><li>-10<sup>9</sup> <= target <= 10<sup>9</sup></li><li>Only one valid answer exists.</li></ul>",
  "languages": {
    "python": {
      "template": "def twoSum(nums, target):\n    ",
      "solution_text": "The most efficient approach uses a hash map (dictionary) to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity.",
      "solution_code": "def twoSum(nums, target):\n    seen = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        \n        if complement in seen:\n            return [seen[complement], i]\n        \n        seen[num] = i\n    \n    return []"
    },
    "javascript": {
      "template": "function twoSum(nums, target) {\n  \n}",
      "solution_text": "The most efficient approach uses a Map or object to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity.",
      "solution_code": "function twoSum(nums, target) {\n    const seen = new Map();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (seen.has(complement)) {\n            return [seen.get(complement), i];\n        }\n        \n        seen.set(nums[i], i);\n    }\n    \n    return [];\n}"
    },
    "typescript": {
      "template": "function twoSum(nums: number[], target: number): number[] {\n  \n}",
      "solution_text": "The most efficient approach uses a Map to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity. TypeScript type annotations are automatically stripped during execution.",
      "solution_code": "function twoSum(nums: number[], target: number): number[] {\n    const seen = new Map<number, number>();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (seen.has(complement)) {\n            return [seen.get(complement), i];\n        }\n        \n        seen.set(nums[i], i);\n    }\n    \n    return [];\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
      "solution_text": "The most efficient approach uses a HashMap to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity.",
      "solution_code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> seen = new HashMap<>();\n        \n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            \n            if (seen.containsKey(complement)) {\n                return new int[]{seen.get(complement), i};\n            }\n            \n            seen.put(nums[i], i);\n        }\n        \n        return new int[]{};\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          2,
          7,
          11,
          15
        ],
        "target": 9
      },
      "output": [
        0,
        1
      ]
    },
    {
      "id": 2,
      "input": {
        "nums": [
          3,
          2,
          4
        ],
        "target": 6
      },
      "output": [
        1,
        2
      ]
    },
    {
      "id": 3,
      "input": {
        "nums": [
          3,
          3
        ],
        "target": 6
      },
      "output": [
        0,
        1
      ]
    }
  ]
}