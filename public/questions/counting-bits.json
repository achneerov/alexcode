{
  "filename": "counting-bits",
  "title": "Counting Bits",
  "keywords": [
    "counting",
    "bits",
    "dynamic",
    "programming",
    "binary",
    "array"
  ],
  "description": "<h2>Counting Bits</h2><p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> (0 <= i <= n), <code>ans[i]</code> is the number of 1's in the binary representation of <code>i</code>.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: n = 2<br>Output: [0,1,1]<br>Explanation:<br>0 --> 0<br>1 --> 1<br>2 --> 10</li><li><strong>Example 2:</strong><br>Input: n = 5<br>Output: [0,1,1,2,1,2]<br>Explanation:<br>0 --> 0<br>1 --> 1<br>2 --> 10<br>3 --> 11<br>4 --> 100<br>5 --> 101</li></ul><h3>Constraints:</h3><ul><li>0 <= n <= 10<sup>5</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def countBits(n):\n    ",
      "solution_text": "Use dynamic programming: dp[i] = dp[i >> 1] + (i & 1).",
      "solution_code": "def countBits(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i >> 1] + (i & 1)\n    return dp"
    },
    "javascript": {
      "template": "function countBits(n) {\n  \n}",
      "solution_text": "Use dynamic programming: dp[i] = dp[i >> 1] + (i & 1).",
      "solution_code": "function countBits(n) {\n    const dp = new Array(n + 1).fill(0);\n    for (let i = 1; i <= n; i++) {\n        dp[i] = dp[i >> 1] + (i & 1);\n    }\n    return dp;\n}"
    },
    "typescript": {
      "template": "function countBits(n: number): number[] {\n  \n}",
      "solution_text": "Use dynamic programming: dp[i] = dp[i >> 1] + (i & 1).",
      "solution_code": "function countBits(n: number): number[] {\n    const dp = new Array(n + 1).fill(0);\n    for (let i = 1; i <= n; i++) {\n        dp[i] = dp[i >> 1] + (i & 1);\n    }\n    return dp;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] countBits(int n) {\n        \n    }\n}",
      "solution_text": "Use dynamic programming: dp[i] = dp[i >> 1] + (i & 1).",
      "solution_code": "class Solution {\n    public int[] countBits(int n) {\n        int[] dp = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i >> 1] + (i & 1);\n        }\n        return dp;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": 2
      },
      "output": [
        0,
        1,
        1
      ]
    },
    {
      "id": 2,
      "input": {
        "n": 5
      },
      "output": [
        0,
        1,
        1,
        2,
        1,
        2
      ]
    }
  ]
}