{
  "filename": "multiply-and-divide",
  "title": "Complete the Function",
  "keywords": ["complete", "function", "multiply", "divide", "number", "mathematical", "operation", "result", "calculation", "arithmetic"],
  "description": "<h2>Complete the Function</h2><h3>Problem</h3><p>Complete the function <code>multiplyAndDivide</code> that takes a number, multiplies it by 3, and then divides it by 4. The multiplication part is already implemented - you just need to add the division step before returning the result.</p><h3>Examples:</h3><ul><li>If <code>num = 12</code>, the output should be <code>9</code> (12 * 3 = 36, then 36 / 4 = 9).</li><li>If <code>num = 8</code>, the output should be <code>6</code> (8 * 3 = 24, then 24 / 4 = 6).</li></ul>",

  "languages": {
    "python": {
      "template": "def multiplyAndDivide(num):\n    result = num * 3\n    # TODO: Divide result by 4\n    return result",
      "solution_text": "Simply divide the result by 4 before returning it. This completes the two-step mathematical operation.",
      "solution_code": "def multiplyAndDivide(num):\n    result = num * 3\n    result = result / 4\n    return result"
    },
    "javascript": {
      "template": "function multiplyAndDivide(num) {\n  const result = num * 3;\n  // TODO: Divide result by 4\n  return result;\n}",
      "solution_text": "Simply divide the result by 4 before returning it. This completes the two-step mathematical operation.",
      "solution_code": "function multiplyAndDivide(num) {\n  const result = num * 3;\n  return result / 4;\n}"
    },
    "typescript": {
      "template": "function multiplyAndDivide(num: number): number {\n  const result = num * 3;\n  // TODO: Divide result by 4\n  return result;\n}",
      "solution_text": "Simply divide the result by 4 before returning it. This completes the two-step mathematical operation. TypeScript ensures type safety with number inputs and outputs.",
      "solution_code": "function multiplyAndDivide(num: number): number {\n  const result = num * 3;\n  return result / 4;\n}"
    }
  },

  "order_matters": false,

  "test_cases": [
    {
      "id": 1,
      "input": {
        "num": 12
      },
      "output": 9
    },
    {
      "id": 2,
      "input": {
        "num": 8
      },
      "output": 6
    },
    {
      "id": 3,
      "input": {
        "num": 0
      },
      "output": 0
    },
    {
      "id": 4,
      "input": {
        "num": 4
      },
      "output": 3
    },
    {
      "id": 5,
      "input": {
        "num": 16
      },
      "output": 12
    }
  ]
}