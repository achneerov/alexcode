{
  "filename": "decode-ways",
  "title": "Decode Ways",
  "keywords": [
    "decode",
    "ways",
    "dynamic",
    "programming",
    "fibonacci",
    "encoding"
  ],
  "description": "<h2>Decode Ways</h2><p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p><pre>'A' -> \"1\"<br>'B' -> \"2\"<br>...<br>'Z' -> \"26\"</pre><p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>\"11106\"</code> can be mapped into:</p><ul><li><code>\"AAJF\"</code> with the grouping <code>(1 1 10 6)</code></li><li><code>\"KJF\"</code> with the grouping <code>(11 10 6)</code></li></ul><p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>\"06\"</code> cannot be mapped into <code>'F'</code> since <code>\"6\"</code> is different from <code>\"06\"</code>.</p><p>Given a string <code>s</code> containing only digits, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p><p>The test cases are generated so that the answer fits in a <strong>32-bit</strong> integer.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: s = \"12\"<br>Output: 2<br>Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).</li><li><strong>Example 2:</strong><br>Input: s = \"226\"<br>Output: 3<br>Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).</li><li><strong>Example 3:</strong><br>Input: s = \"06\"<br>Output: 0<br>Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").</li></ul><h3>Constraints:</h3><ul><li>1 <= s.length <= 100</li><li>s contains only digits and may contain leading zero(s).</li></ul>",
  "languages": {
    "python": {
      "template": "def numDecodings(s):\n    ",
      "solution_text": "Use DP similar to climbing stairs. For each position, we can decode single digit or two digits if valid.",
      "solution_code": "def numDecodings(s):\n    if not s or s[0] == '0':\n        return 0\n    \n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1  # Empty string\n    dp[1] = 1  # First character is not '0'\n    \n    for i in range(2, n + 1):\n        # Single digit decode\n        if s[i-1] != '0':\n            dp[i] += dp[i-1]\n        \n        # Two digit decode\n        two_digit = int(s[i-2:i])\n        if 10 <= two_digit <= 26:\n            dp[i] += dp[i-2]\n    \n    return dp[n]"
    },
    "javascript": {
      "template": "function numDecodings(s) {\n  \n}",
      "solution_text": "Use DP similar to climbing stairs. For each position, we can decode single digit or two digits if valid.",
      "solution_code": "function numDecodings(s) {\n    if (!s || s[0] === '0') return 0;\n    \n    const n = s.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1; // Empty string\n    dp[1] = 1; // First character is not '0'\n    \n    for (let i = 2; i <= n; i++) {\n        // Single digit decode\n        if (s[i-1] !== '0') {\n            dp[i] += dp[i-1];\n        }\n        \n        // Two digit decode\n        const twoDigit = parseInt(s.substring(i-2, i));\n        if (twoDigit >= 10 && twoDigit <= 26) {\n            dp[i] += dp[i-2];\n        }\n    }\n    \n    return dp[n];\n}"
    },
    "typescript": {
      "template": "function numDecodings(s: string): number {\n  \n}",
      "solution_text": "Use DP similar to climbing stairs. For each position, we can decode single digit or two digits if valid.",
      "solution_code": "function numDecodings(s: string): number {\n    if (!s || s[0] === '0') return 0;\n    \n    const n = s.length;\n    const dp = new Array(n + 1).fill(0);\n    dp[0] = 1; // Empty string\n    dp[1] = 1; // First character is not '0'\n    \n    for (let i = 2; i <= n; i++) {\n        // Single digit decode\n        if (s[i-1] !== '0') {\n            dp[i] += dp[i-1];\n        }\n        \n        // Two digit decode\n        const twoDigit = parseInt(s.substring(i-2, i));\n        if (twoDigit >= 10 && twoDigit <= 26) {\n            dp[i] += dp[i-2];\n        }\n    }\n    \n    return dp[n];\n}"
    },
    "java": {
      "template": "class Solution {\n    public int numDecodings(String s) {\n        \n    }\n}",
      "solution_text": "Use DP similar to climbing stairs. For each position, we can decode single digit or two digits if valid.",
      "solution_code": "class Solution {\n    public int numDecodings(String s) {\n        if (s == null || s.length() == 0 || s.charAt(0) == '0') {\n            return 0;\n        }\n        \n        int n = s.length();\n        int[] dp = new int[n + 1];\n        dp[0] = 1; // Empty string\n        dp[1] = 1; // First character is not '0'\n        \n        for (int i = 2; i <= n; i++) {\n            // Single digit decode\n            if (s.charAt(i-1) != '0') {\n                dp[i] += dp[i-1];\n            }\n            \n            // Two digit decode\n            int twoDigit = Integer.parseInt(s.substring(i-2, i));\n            if (twoDigit >= 10 && twoDigit <= 26) {\n                dp[i] += dp[i-2];\n            }\n        }\n        \n        return dp[n];\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "12"
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "s": "226"
      },
      "output": 3
    },
    {
      "id": 3,
      "input": {
        "s": "06"
      },
      "output": 0
    }
  ]
}