{
  "description": "<h2>Two Sum</h2><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><h3>Examples:</h3><ul><li>Input: nums = [2,7,11,15], target = 9<br>Output: [0,1]<br>Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</li><li>Input: nums = [3,2,4], target = 6<br>Output: [1,2]</li><li>Input: nums = [3,3], target = 6<br>Output: [0,1]</li></ul>",

  "languages": {
    "python": {
      "function_signature": "def twoSum(nums, target):",
      "solution_text": "The most efficient approach uses a hash map (dictionary) to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity.",
      "solution_code": "def twoSum(nums, target):\n    seen = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        \n        if complement in seen:\n            return [seen[complement], i]\n        \n        seen[num] = i\n    \n    return []"
    },
    "javascript": {
      "function_signature": "function twoSum(nums, target) { }",
      "solution_text": "The most efficient approach uses a Map or object to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity.",
      "solution_code": "function twoSum(nums, target) {\n    const seen = new Map();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (seen.has(complement)) {\n            return [seen.get(complement), i];\n        }\n        \n        seen.set(nums[i], i);\n    }\n    \n    return [];\n}"
    },
    "typescript": {
      "function_signature": "function twoSum(nums: number[], target: number): number[] { }",
      "solution_text": "The most efficient approach uses a Map to keep track of the numbers we've seen and their indices. As we iterate through the array, for each number we calculate its complement (target - current number) and check if we've seen it before. This achieves O(n) time complexity and O(n) space complexity. Note: TypeScript type annotations are automatically stripped during execution.",
      "solution_code": "function twoSum(nums: number[], target: number): number[] {\n    const seen = new Map<number, number>();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (seen.has(complement)) {\n            return [seen.get(complement), i];\n        }\n        \n        seen.set(nums[i], i);\n    }\n    \n    return [];\n}"
    }
  },

  "order_matters": false,

  "function_params_names": ["nums", "target"],
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [2, 7, 11, 15],
        "target": 9
      },
      "output": [0, 1]
    },
    {
      "id": 2,
      "input": {
        "nums": [3, 2, 4],
        "target": 6
      },
      "output": [1, 2]
    },
    {
      "id": 3,
      "input": {
        "nums": [3, 3],
        "target": 6
      },
      "output": [0, 1]
    },
    {
      "id": 4,
      "input": {
        "nums": [0, 4, 3, 0],
        "target": 0
      },
      "output": [0, 3]
    },
    {
      "id": 5,
      "input": {
        "nums": [-1, -3, 5, 7],
        "target": 4
      },
      "output": [0, 2]
    },
    {
      "id": 6,
      "input": {
        "nums": [5, 75, 25],
        "target": 100
      },
      "output": [1, 2]
    },
    {
      "id": 7,
      "input": {
        "nums": [1, 2, 3, 4, 5],
        "target": 9
      },
      "output": [3, 4]
    },
    {
      "id": 8,
      "input": {
        "nums": [10, 20, 30, 40, 50],
        "target": 80
      },
      "output": [2, 4]
    },
    {
      "id": 9,
      "input": {
        "nums": [-7, 2, 8, 11, 15],
        "target": 1
      },
      "output": [0, 2]
    },
    {
      "id": 10,
      "input": {
        "nums": [1000, 2000, 3000, 4000],
        "target": 7000
      },
      "output": [2, 3]
    }
  ]
}
