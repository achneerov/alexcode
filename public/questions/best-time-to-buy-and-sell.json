{
  "filename": "best-time-to-buy-and-sell",
  "title": "Best Time to Buy and Sell Stock",
  "keywords": [
    "best",
    "time",
    "buy",
    "sell",
    "stock",
    "profit",
    "maximum",
    "array",
    "prices",
    "transaction"
  ],
  "description": "<h2>Best Time to Buy and Sell Stock</h2><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the i<sup>th</sup> day.</p><p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p><p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: prices = [7,1,5,3,6,4]<br>Output: 5<br>Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</li><li><strong>Example 2:</strong><br>Input: prices = [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transactions are done and the max profit = 0.</li></ul><h3>Constraints:</h3><ul><li>1 <= prices.length <= 10<sup>5</sup></li><li>0 <= prices[i] <= 10<sup>4</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def maxProfit(prices):\n    ",
      "solution_text": "Use a two-pointer approach to track the minimum buy price and maximum profit. Keep track of the minimum price seen so far and calculate profit at each step.",
      "solution_code": "def maxProfit(prices):\n    if not prices:\n        return 0\n    \n    min_price = prices[0]\n    max_profit = 0\n    \n    for price in prices[1:]:\n        max_profit = max(max_profit, price - min_price)\n        min_price = min(min_price, price)\n    \n    return max_profit"
    },
    "javascript": {
      "template": "function maxProfit(prices) {\n  \n}",
      "solution_text": "Use a two-pointer approach to track the minimum buy price and maximum profit. Keep track of the minimum price seen so far and calculate profit at each step.",
      "solution_code": "function maxProfit(prices) {\n    if (prices.length === 0) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n        minPrice = Math.min(minPrice, prices[i]);\n    }\n    \n    return maxProfit;\n}"
    },
    "typescript": {
      "template": "function maxProfit(prices: number[]): number {\n  \n}",
      "solution_text": "Use a two-pointer approach to track the minimum buy price and maximum profit. Keep track of the minimum price seen so far and calculate profit at each step.",
      "solution_code": "function maxProfit(prices: number[]): number {\n    if (prices.length === 0) return 0;\n    \n    let minPrice = prices[0];\n    let maxProfit = 0;\n    \n    for (let i = 1; i < prices.length; i++) {\n        maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n        minPrice = Math.min(minPrice, prices[i]);\n    }\n    \n    return maxProfit;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}",
      "solution_text": "Use a two-pointer approach to track the minimum buy price and maximum profit. Keep track of the minimum price seen so far and calculate profit at each step.",
      "solution_code": "class Solution {\n    public int maxProfit(int[] prices) {\n        if (prices.length == 0) return 0;\n        \n        int minPrice = prices[0];\n        int maxProfit = 0;\n        \n        for (int i = 1; i < prices.length; i++) {\n            maxProfit = Math.max(maxProfit, prices[i] - minPrice);\n            minPrice = Math.min(minPrice, prices[i]);\n        }\n        \n        return maxProfit;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "prices": [
          7,
          1,
          5,
          3,
          6,
          4
        ]
      },
      "output": 5
    },
    {
      "id": 2,
      "input": {
        "prices": [
          7,
          6,
          4,
          3,
          1
        ]
      },
      "output": 0
    },
    {
      "id": 3,
      "input": {
        "prices": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "output": 4
    },
    {
      "id": 4,
      "input": {
        "prices": [
          2,
          4,
          1
        ]
      },
      "output": 2
    }
  ]
}