{
  "filename": "house-robber",
  "title": "House Robber",
  "keywords": [
    "house",
    "robber",
    "dynamic",
    "programming",
    "maximum",
    "adjacent"
  ],
  "description": "<h2>House Robber</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p><p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [1,2,3,1]<br>Output: 4<br>Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).<br>Total amount you can rob = 1 + 3 = 4.</li><li><strong>Example 2:</strong><br>Input: nums = [2,7,9,3,1]<br>Output: 12<br>Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).<br>Total amount you can rob = 2 + 9 + 1 = 12.</li></ul><h3>Constraints:</h3><ul><li>1 <= nums.length <= 100</li><li>0 <= nums[i] <= 400</li></ul>",
  "languages": {
    "python": {
      "template": "def rob(nums):\n    ",
      "solution_text": "Use dynamic programming. For each house, decide whether to rob it or not based on maximum profit.",
      "solution_code": "def rob(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    prev2 = nums[0]\n    prev1 = max(nums[0], nums[1])\n    \n    for i in range(2, len(nums)):\n        current = max(prev1, prev2 + nums[i])\n        prev2 = prev1\n        prev1 = current\n    \n    return prev1"
    },
    "javascript": {
      "template": "function rob(nums) {\n  \n}",
      "solution_text": "Use dynamic programming. For each house, decide whether to rob it or not based on maximum profit.",
      "solution_code": "function rob(nums) {\n    if (nums.length === 0) return 0;\n    if (nums.length === 1) return nums[0];\n    \n    let prev2 = nums[0];\n    let prev1 = Math.max(nums[0], nums[1]);\n    \n    for (let i = 2; i < nums.length; i++) {\n        const current = Math.max(prev1, prev2 + nums[i]);\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return prev1;\n}"
    },
    "typescript": {
      "template": "function rob(nums: number[]): number {\n  \n}",
      "solution_text": "Use dynamic programming. For each house, decide whether to rob it or not based on maximum profit.",
      "solution_code": "function rob(nums: number[]): number {\n    if (nums.length === 0) return 0;\n    if (nums.length === 1) return nums[0];\n    \n    let prev2 = nums[0];\n    let prev1 = Math.max(nums[0], nums[1]);\n    \n    for (let i = 2; i < nums.length; i++) {\n        const current = Math.max(prev1, prev2 + nums[i]);\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return prev1;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int rob(int[] nums) {\n        \n    }\n}",
      "solution_text": "Use dynamic programming. For each house, decide whether to rob it or not based on maximum profit.",
      "solution_code": "class Solution {\n    public int rob(int[] nums) {\n        if (nums.length == 0) return 0;\n        if (nums.length == 1) return nums[0];\n        \n        int prev2 = nums[0];\n        int prev1 = Math.max(nums[0], nums[1]);\n        \n        for (int i = 2; i < nums.length; i++) {\n            int current = Math.max(prev1, prev2 + nums[i]);\n            prev2 = prev1;\n            prev1 = current;\n        }\n        \n        return prev1;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          1,
          2,
          3,
          1
        ]
      },
      "output": 4
    },
    {
      "id": 2,
      "input": {
        "nums": [
          2,
          7,
          9,
          3,
          1
        ]
      },
      "output": 12
    }
  ]
}