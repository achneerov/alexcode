{
  "filename": "count-good-nodes-in-binary-tree",
  "title": "Count Good Nodes in Binary Tree",
  "keywords": [
    "count",
    "good",
    "nodes",
    "binary",
    "tree",
    "leetcode",
    "1448",
    "within",
    "node",
    "considered"
  ],
  "description": "<h2>Count Good Nodes in Binary Tree</h2><p>Leetcode 1448. Count Good Nodes In Binary Tree</p><p></p><p>Within a binary tree, a node `x` is considered **good** if the path from the root of the tree to the node `x` contains no nodes with a value greater than the value of node `x`</p><p></p><p>Given the root of a binary tree `root`, return the number of **good** nodes within the tree.</p><h3>Examples:</h3><ul><li>Input: root = [1,2,-1,3,4]<br><br>Output: 4</li></ul><h3>Constraints:</h3><ul><li> `1 <= number of nodes in the tree <= 100`</li><li> `-100 <= Node.val <= 100`</li></ul>",
  "languages": {
    "python": {
      "template": "def countGoodNodesInBinaryTree(root):\n    ",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "def countGoodNodesInBinaryTree(root):\n    if not root:\n        return None  # or appropriate base case result\n    \n    # Process current node\n    result = root.val\n    \n    # Recursively process subtrees\n    left_result = countGoodNodesInBinaryTree(root.left) if root.left else None\n    right_result = countGoodNodesInBinaryTree(root.right) if root.right else None\n    \n    # Combine results based on operation\n    # This is a template - adjust based on specific operation\n    return result"
    },
    "javascript": {
      "template": "function countGoodNodesInBinaryTree(root) {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function countGoodNodesInBinaryTree(root) {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? countGoodNodesInBinaryTree(root.left) : null;\n    const rightResult = root.right ? countGoodNodesInBinaryTree(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "typescript": {
      "template": "function countGoodNodesInBinaryTree(root: number[]): number {\n  \n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "function countGoodNodesInBinaryTree(root: TreeNode | null): any {\n    if (!root) return null; // or appropriate base case result\n    \n    // Process current node\n    const result = root.val;\n    \n    // Recursively process subtrees\n    const leftResult = root.left ? countGoodNodesInBinaryTree(root.left) : null;\n    const rightResult = root.right ? countGoodNodesInBinaryTree(root.right) : null;\n    \n    // Combine results based on operation\n    // This is a template - adjust based on specific operation\n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int countGoodNodesInBinaryTree(int[] root) {\n        \n    }\n}",
      "solution_text": "Binary tree operation implementation:\n\n**Algorithm:**\n1. Handle base case (null/empty tree)\n2. Process current node based on operation\n3. Recursively handle left and right subtrees\n4. Combine results as needed\n\n**Time Complexity:** O(n) - visit each node once\n**Space Complexity:** O(h) - recursion stack depth\n\n**Key Insights:**\n- Recursive nature matches tree structure\n- Base case prevents infinite recursion\n- Consider iterative approach for space optimization",
      "solution_code": "class Solution {\n    public Object countGoodNodesInBinaryTree(TreeNode root) {\n        if (root == null) return null; // or appropriate base case result\n        \n        // Process current node\n        int result = root.val;\n        \n        // Recursively process subtrees\n        Object leftResult = root.left != null ? countGoodNodesInBinaryTree(root.left) : null;\n        Object rightResult = root.right != null ? countGoodNodesInBinaryTree(root.right) : null;\n        \n        // Combine results based on operation\n        // This is a template - adjust based on specific operation\n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": [
          1,
          2,
          -1,
          3,
          4
        ]
      },
      "output": 4
    }
  ]
}