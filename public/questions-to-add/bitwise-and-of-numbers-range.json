{
  "filename": "bitwise-and-of-numbers-range",
  "title": "Bitwise AND of Numbers Range",
  "keywords": [
    "bitwise",
    "numbers",
    "range",
    "leetcode",
    "201",
    "given",
    "two",
    "integers",
    "left",
    "right"
  ],
  "description": "<h2>Bitwise AND of Numbers Range</h2><p>Leetcode 201. Bitwise AND of Numbers Range</p><p></p><p>You are given two integers `left` and `right` that represent the range `[left, right]`, return the **bitwise AND** of all numbers in this range, inclusive.</p><h3>Examples:</h3><ul><li>Input: left = 1, right = 5<br><br>Output: 0</li><li>Input: left = 10, right = 12<br><br>Output: 8</li></ul><h3>Constraints:</h3><ul><li> `0 <= left <= right <= ((2^31)-1)`</li></ul>",
  "languages": {
    "python": {
      "template": "def bitwiseAndOfNumbersRange(left, right):\n    ",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "def bitwiseAndOfNumbersRange(left, right):\n    shift = 0\n    \n    # Find the common prefix of left and right\n    while left != right:\n        left >>= 1\n        right >>= 1\n        shift += 1\n    \n    # Shift back to get the result\n    return left << shift"
    },
    "javascript": {
      "template": "function bitwiseAndOfNumbersRange(left, right) {\n  \n}",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "function bitwiseAndOfNumbersRange(left, right) {\n    let shift = 0;\n    \n    // Find the common prefix of left and right\n    while (left !== right) {\n        left >>= 1;\n        right >>= 1;\n        shift++;\n    }\n    \n    // Shift back to get the result\n    return left << shift;\n}"
    },
    "typescript": {
      "template": "function bitwiseAndOfNumbersRange(left: number, right: number): number {\n  \n}",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "function bitwiseAndOfNumbersRange(left: number, right: number): number {\n    let shift = 0;\n    \n    // Find the common prefix of left and right\n    while (left !== right) {\n        left >>= 1;\n        right >>= 1;\n        shift++;\n    }\n    \n    // Shift back to get the result\n    return left << shift;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int bitwiseAndOfNumbersRange(int left, int right) {\n        \n    }\n}",
      "solution_text": "<h3>Bitwise AND of Numbers Range</h3><p><strong>Algorithm:</strong></p><ol><li>Find the common prefix of binary representations of left and right</li><li>When bits differ, all following bits will become 0 due to AND operation</li><li>Shift both numbers right until they become equal</li><li>Shift the result back left by the same amount</li></ol><p><strong>Time Complexity:</strong> O(log n) - where n is the larger number</p><p><strong>Space Complexity:</strong> O(1) - constant extra space</p><p><strong>Key Insights:</strong></p><ul><li>Consecutive numbers will have different bits at some position</li><li>AND of any range containing both 0 and 1 at a bit position results in 0</li><li>Only the common prefix bits remain as 1</li></ul>",
      "solution_code": "class Solution {\n    public int bitwiseAndOfNumbersRange(int left, int right) {\n        int shift = 0;\n        \n        // Find the common prefix of left and right\n        while (left != right) {\n            left >>= 1;\n            right >>= 1;\n            shift++;\n        }\n        \n        // Shift back to get the result\n        return left << shift;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "left": 1,
        "right": 5
      },
      "output": 0
    },
    {
      "id": 2,
      "input": {
        "left": 10,
        "right": 12
      },
      "output": 8
    },
    {
      "id": 3,
      "input": {
        "left": 1,
        "right": 2147483647
      },
      "output": 0
    }
  ]
}