{
  "filename": "evaluate-reverse-polish-notation",
  "title": "Evaluate Reverse Polish Notation",
  "keywords": [
    "evaluate",
    "reverse",
    "polish",
    "notation",
    "leetcode",
    "150",
    "given",
    "array",
    "strings",
    "tokens"
  ],
  "description": "<h2>Evaluate Reverse Polish Notation</h2><p>Leetcode 150. Evaluate Reverse Polish Notation</p><p></p><p>You are given an array of strings `tokens` that represents a **valid** arithmetic expression in [Reverse Polish Notation](https://en.wikipedia.org/wiki/Reverse_Polish_notation).</p><p></p><p>Return the integer that represents the evaluation of the expression.</p><p></p><p>* The operands may be integers or the results of other operations.</p><p>* The operators include `'+'`, `'-'`, `'*'`, and `'/'`.</p><p>* Assume that division between integers always truncates toward zero.</p><h3>Examples:</h3><ul><li>Input: tokens = [\"1\",\"2\",\"+\",\"3\",\"*\",\"4\",\"-\"]<br><br>Output: 5<br><br>Explanation: ((1 + 2) * 3) - 4 = 5</li></ul><h3>Constraints:</h3><ul><li> `1 <= tokens.length <= 1000`.</li><li> tokens[i] is `\"+\"`, `\"-\"`, `\"*\"`, or `\"/\"`, or a string representing an integer in the range `[-100, 100]`.</li></ul>",
  "languages": {
    "python": {
      "template": "def evaluateReversePolishNotation(tokens):\n    ",
      "solution_text": "Reverse implementation using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end\n2. Swap elements while moving pointers toward center\n3. Continue until pointers meet in middle\n\n**Time Complexity:** O(n) - single pass through array/string\n**Space Complexity:** O(1) - in-place reversal\n\n**Key Insights:**\n- Two pointers technique for in-place operations\n- Works for arrays, strings, and linked lists\n- Handles odd and even length inputs correctly",
      "solution_code": "def evaluateReversePolishNotation(s):\n    if not s:\n        return s\n    \n    # Convert to list for in-place modification\n    chars = list(s) if isinstance(s, str) else s\n    left, right = 0, len(chars) - 1\n    \n    while left < right:\n        chars[left], chars[right] = chars[right], chars[left]\n        left += 1\n        right -= 1\n    \n    return ''.join(chars) if isinstance(s, str) else chars"
    },
    "javascript": {
      "template": "function evaluateReversePolishNotation(tokens) {\n  \n}",
      "solution_text": "Reverse implementation using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end\n2. Swap elements while moving pointers toward center\n3. Continue until pointers meet in middle\n\n**Time Complexity:** O(n) - single pass through array/string\n**Space Complexity:** O(1) - in-place reversal\n\n**Key Insights:**\n- Two pointers technique for in-place operations\n- Works for arrays, strings, and linked lists\n- Handles odd and even length inputs correctly",
      "solution_code": "function evaluateReversePolishNotation(s) {\n    if (!s) return s;\n    \n    const chars = Array.isArray(s) ? s : s.split('');\n    let left = 0, right = chars.length - 1;\n    \n    while (left < right) {\n        [chars[left], chars[right]] = [chars[right], chars[left]];\n        left++;\n        right--;\n    }\n    \n    return Array.isArray(s) ? chars : chars.join('');\n}"
    },
    "typescript": {
      "template": "function evaluateReversePolishNotation(tokens: number[]): number {\n  \n}",
      "solution_text": "Reverse implementation using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end\n2. Swap elements while moving pointers toward center\n3. Continue until pointers meet in middle\n\n**Time Complexity:** O(n) - single pass through array/string\n**Space Complexity:** O(1) - in-place reversal\n\n**Key Insights:**\n- Two pointers technique for in-place operations\n- Works for arrays, strings, and linked lists\n- Handles odd and even length inputs correctly",
      "solution_code": "function evaluateReversePolishNotation(s: string | any[]): string | any[] {\n    if (!s) return s;\n    \n    const chars = Array.isArray(s) ? s : s.split('');\n    let left = 0, right = chars.length - 1;\n    \n    while (left < right) {\n        [chars[left], chars[right]] = [chars[right], chars[left]];\n        left++;\n        right--;\n    }\n    \n    return Array.isArray(s) ? chars : chars.join('');\n}"
    },
    "java": {
      "template": "class Solution {\n    public int evaluateReversePolishNotation(int[] tokens) {\n        \n    }\n}",
      "solution_text": "Reverse implementation using two pointers:\n\n**Algorithm:**\n1. Use two pointers from start and end\n2. Swap elements while moving pointers toward center\n3. Continue until pointers meet in middle\n\n**Time Complexity:** O(n) - single pass through array/string\n**Space Complexity:** O(1) - in-place reversal\n\n**Key Insights:**\n- Two pointers technique for in-place operations\n- Works for arrays, strings, and linked lists\n- Handles odd and even length inputs correctly",
      "solution_code": "class Solution {\n    public String evaluateReversePolishNotation(String s) {\n        if (s == null || s.length() <= 1) return s;\n        \n        char[] chars = s.toCharArray();\n        int left = 0, right = chars.length - 1;\n        \n        while (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n        \n        return new String(chars);\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "tokens": [
          "1",
          "2",
          "+",
          "3",
          "*",
          "4",
          "-"
        ]
      },
      "output": 5
    }
  ]
}