{
  "filename": "4sum",
  "title": "4Sum",
  "keywords": [
    "4sum",
    "leetcode",
    "given",
    "integer",
    "array",
    "nums",
    "size",
    "return",
    "all",
    "unique"
  ],
  "description": "<h2>4Sum</h2><p>Leetcode 18. 4Sum</p><p></p><p>You are given an integer array `nums` of size `n`, return an array of all the unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that:</p><p></p><p>- `0 <= a, b, c, d < n`</p><p>- `a, b, c,` and `d` are **distinct**.</p><p>- `nums[a] + nums[b] + nums[c] + nums[d] == target`</p><p></p><p>You may return the answer in **any order**.</p><p></p><p>Note: `[1,0,3,2]` and `[3,0,1,2]` are considered as same quadruplets.</p><h3>Examples:</h3><ul><li>Input: nums = [3,2,3,-3,1,0], target = 3<br><br>Output: [[-3,0,3,3],[-3,1,2,3]]</li><li>Input: nums = [1,-1,1,-1,1,-1], target = 2<br><br>Output: [[-1,1,1,1]]</li></ul><h3>Constraints:</h3><ul><li> `1 <= nums.length <= 200`</li><li> `-1,000,000,000 <= nums[i] <= 1,000,000,000`</li><li> `-1,000,000,000 <= target <= 1,000,000,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def solve4sum(nums, target):\n    ",
      "solution_text": "Efficient Multi-Sum solution using sorting and two-pointers:\n\n**Algorithm:**\n1. Sort the input array to enable two-pointers technique\n2. Use nested loops with early termination for efficiency\n3. Apply two-pointers to find remaining sum combinations\n4. Skip duplicates to ensure unique quadruplets/triplets\n\n**Time Complexity:** O(n³) for 4Sum, O(n²) for 3Sum\n**Space Complexity:** O(1) excluding output array\n\n**Key Insights:**\n- Sorting enables duplicate skipping and two-pointers\n- Early termination when current sum is too large/small\n- Careful duplicate handling prevents redundant results",
      "solution_code": "def solve4sum(nums, target):\n    if len(nums) < 4:\n        return []\n    \n    nums.sort()\n    result = []\n    n = len(nums)\n    \n    for i in range(n - 3):\n        # Skip duplicates for first number\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n            \n        # Early termination if minimum possible sum is too large\n        if nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target:\n            break\n            \n        # Early termination if maximum possible sum is too small\n        if nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target:\n            continue\n        \n        for j in range(i + 1, n - 2):\n            # Skip duplicates for second number\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            \n            # Two pointers for remaining two numbers\n            left, right = j + 1, n - 1\n            \n            while left < right:\n                current_sum = nums[i] + nums[j] + nums[left] + nums[right]\n                \n                if current_sum == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    \n                    # Skip duplicates\n                    while left < right and nums[left] == nums[left + 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right - 1]:\n                        right -= 1\n                    \n                    left += 1\n                    right -= 1\n                elif current_sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    \n    return result"
    },
    "javascript": {
      "template": "function solve4sum(nums, target) {\n  \n}",
      "solution_text": "Efficient Multi-Sum solution using sorting and two-pointers:\n\n**Algorithm:**\n1. Sort the input array to enable two-pointers technique\n2. Use nested loops with early termination for efficiency\n3. Apply two-pointers to find remaining sum combinations\n4. Skip duplicates to ensure unique quadruplets/triplets\n\n**Time Complexity:** O(n³) for 4Sum, O(n²) for 3Sum\n**Space Complexity:** O(1) excluding output array\n\n**Key Insights:**\n- Sorting enables duplicate skipping and two-pointers\n- Early termination when current sum is too large/small\n- Careful duplicate handling prevents redundant results",
      "solution_code": "function solve4sum(nums, target) {\n    if (nums.length < 4) return [];\n    \n    nums.sort((a, b) => a - b);\n    const result = [];\n    const n = nums.length;\n    \n    for (let i = 0; i < n - 3; i++) {\n        // Skip duplicates for first number\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        \n        // Early termination optimizations\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;\n        if (nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target) continue;\n        \n        for (let j = i + 1; j < n - 2; j++) {\n            // Skip duplicates for second number\n            if (j > i + 1 && nums[j] === nums[j - 1]) continue;\n            \n            // Two pointers for remaining two numbers\n            let left = j + 1, right = n - 1;\n            \n            while (left < right) {\n                const currentSum = nums[i] + nums[j] + nums[left] + nums[right];\n                \n                if (currentSum === target) {\n                    result.push([nums[i], nums[j], nums[left], nums[right]]);\n                    \n                    // Skip duplicates\n                    while (left < right && nums[left] === nums[left + 1]) left++;\n                    while (left < right && nums[right] === nums[right - 1]) right--;\n                    \n                    left++;\n                    right--;\n                } else if (currentSum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    \n    return result;\n}"
    },
    "typescript": {
      "template": "function solve4sum(nums: number[], target: number): number[] {\n  \n}",
      "solution_text": "Efficient Multi-Sum solution using sorting and two-pointers:\n\n**Algorithm:**\n1. Sort the input array to enable two-pointers technique\n2. Use nested loops with early termination for efficiency\n3. Apply two-pointers to find remaining sum combinations\n4. Skip duplicates to ensure unique quadruplets/triplets\n\n**Time Complexity:** O(n³) for 4Sum, O(n²) for 3Sum\n**Space Complexity:** O(1) excluding output array\n\n**Key Insights:**\n- Sorting enables duplicate skipping and two-pointers\n- Early termination when current sum is too large/small\n- Careful duplicate handling prevents redundant results",
      "solution_code": "function solve4sum(nums: number[], target: number): number[][] {\n    if (nums.length < 4) return [];\n    \n    nums.sort((a, b) => a - b);\n    const result: number[][] = [];\n    const n = nums.length;\n    \n    for (let i = 0; i < n - 3; i++) {\n        // Skip duplicates for first number\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        \n        // Early termination optimizations\n        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;\n        if (nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target) continue;\n        \n        for (let j = i + 1; j < n - 2; j++) {\n            // Skip duplicates for second number\n            if (j > i + 1 && nums[j] === nums[j - 1]) continue;\n            \n            // Two pointers for remaining two numbers\n            let left = j + 1, right = n - 1;\n            \n            while (left < right) {\n                const currentSum = nums[i] + nums[j] + nums[left] + nums[right];\n                \n                if (currentSum === target) {\n                    result.push([nums[i], nums[j], nums[left], nums[right]]);\n                    \n                    // Skip duplicates\n                    while (left < right && nums[left] === nums[left + 1]) left++;\n                    while (left < right && nums[right] === nums[right - 1]) right--;\n                    \n                    left++;\n                    right--;\n                } else if (currentSum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n    }\n    \n    return result;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] solve4sum(int[] nums, int target) {\n        \n    }\n}",
      "solution_text": "Efficient Multi-Sum solution using sorting and two-pointers:\n\n**Algorithm:**\n1. Sort the input array to enable two-pointers technique\n2. Use nested loops with early termination for efficiency\n3. Apply two-pointers to find remaining sum combinations\n4. Skip duplicates to ensure unique quadruplets/triplets\n\n**Time Complexity:** O(n³) for 4Sum, O(n²) for 3Sum\n**Space Complexity:** O(1) excluding output array\n\n**Key Insights:**\n- Sorting enables duplicate skipping and two-pointers\n- Early termination when current sum is too large/small\n- Careful duplicate handling prevents redundant results",
      "solution_code": "class Solution {\n    public List<List<Integer>> solve4sum(int[] nums, int target) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (nums.length < 4) return result;\n        \n        Arrays.sort(nums);\n        int n = nums.length;\n        \n        for (int i = 0; i < n - 3; i++) {\n            // Skip duplicates for first number\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            \n            // Early termination optimizations\n            if ((long)nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;\n            if ((long)nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target) continue;\n            \n            for (int j = i + 1; j < n - 2; j++) {\n                // Skip duplicates for second number\n                if (j > i + 1 && nums[j] == nums[j - 1]) continue;\n                \n                // Two pointers for remaining two numbers\n                int left = j + 1, right = n - 1;\n                \n                while (left < right) {\n                    long currentSum = (long)nums[i] + nums[j] + nums[left] + nums[right];\n                    \n                    if (currentSum == target) {\n                        result.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));\n                        \n                        // Skip duplicates\n                        while (left < right && nums[left] == nums[left + 1]) left++;\n                        while (left < right && nums[right] == nums[right - 1]) right--;\n                        \n                        left++;\n                        right--;\n                    } else if (currentSum < target) {\n                        left++;\n                    } else {\n                        right--;\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          3,
          2,
          3,
          -3,
          1,
          0
        ],
        "target": 3
      },
      "output": [
        [
          -3,
          0,
          3,
          3
        ],
        [
          -3,
          1,
          2,
          3
        ]
      ]
    },
    {
      "id": 2,
      "input": {
        "nums": [
          1,
          -1,
          1,
          -1,
          1,
          -1
        ],
        "target": 2
      },
      "output": [
        [
          -1,
          1,
          1,
          1
        ]
      ]
    }
  ]
}