{
  "filename": "car-pooling",
  "title": "Car Pooling",
  "keywords": [
    "car",
    "pooling",
    "leetcode",
    "1094",
    "there",
    "capacity",
    "empty",
    "seats",
    "vehicle",
    "only"
  ],
  "description": "<h2>Car Pooling</h2><p>Leetcode 1094. Car Pooling</p><p></p><p>There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p><p></p><p>You are given the integer `capacity` and a integer array `trips` where `trips[i] = [numPassengers[i], from[i], to[i]]` indicates that the `ith` trip has `numPassengers[i]` passengers and the locations to pick them up and drop them off are `from[i]` and `to[i]` respectively. The locations are given as the number of kilometers due east from the car's initial location.</p><p></p><p>Return `true` if it is possible to pick up and drop off all passengers for all the given trips, or `false` otherwise.</p><h3>Examples:</h3><ul><li>Input: trips = [[4,1,2],[3,2,4]], capacity = 4<br><br>Output: true</li><li>Input: trips = [[2,1,3],[3,2,4]], capacity = 4<br><br>Output: false</li></ul><h3>Constraints:</h3><ul><li> `1 <= trips.length <= 1000`</li><li> `trips[i].length == 3`</li><li> `1 <= numPassengers[i] <= 100`</li><li> `0 <= from[i] < to[i] <= 1000`</li><li> `1 <= capacity <= 100,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def carPooling(trips, capacity):\n    ",
      "solution_text": "<p><strong>Car Pooling Solution using Difference Array:</strong></p><p>Track passenger count changes at pickup and dropoff points.</p><p><strong>Algorithm:</strong></p><ol><li>Create events for pickup (+passengers) and dropoff (-passengers)</li><li>Sort events by location</li><li>Process events and track current passenger count</li><li>Check if capacity is ever exceeded</li></ol><p><strong>Alternative: Difference Array</strong></p><ol><li>Use array to track passenger changes at each location</li><li>Increment at pickup, decrement at dropoff</li><li>Calculate running sum and check capacity</li></ol><p><strong>Time Complexity:</strong> O(n log n) for sorting or O(max_location) for difference array</p><p><strong>Space Complexity:</strong> O(n) or O(max_location)</p>",
      "solution_code": "def carPooling(trips, capacity):\n    # Create events: (location, passenger_change)\n    events = []\n    \n    for passengers, start, end in trips:\n        events.append((start, passengers))    # pickup: add passengers\n        events.append((end, -passengers))     # dropoff: remove passengers\n    \n    # Sort events by location\n    events.sort()\n    \n    # Process events and track current passenger count\n    current_passengers = 0\n    \n    for location, change in events:\n        current_passengers += change\n        if current_passengers > capacity:\n            return False\n    \n    return True"
    },
    "javascript": {
      "template": "function carPooling(trips, capacity) {\n  \n}",
      "solution_text": "<p><strong>Car Pooling Solution using Difference Array:</strong></p><p>Track passenger count changes at pickup and dropoff points.</p><p><strong>Algorithm:</strong></p><ol><li>Create events for pickup (+passengers) and dropoff (-passengers)</li><li>Sort events by location</li><li>Process events and track current passenger count</li><li>Check if capacity is ever exceeded</li></ol><p><strong>Alternative: Difference Array</strong></p><ol><li>Use array to track passenger changes at each location</li><li>Increment at pickup, decrement at dropoff</li><li>Calculate running sum and check capacity</li></ol><p><strong>Time Complexity:</strong> O(n log n) for sorting or O(max_location) for difference array</p><p><strong>Space Complexity:</strong> O(n) or O(max_location)</p>",
      "solution_code": "function carPooling(trips, capacity) {\n    // Create events: [location, passenger_change]\n    const events = [];\n    \n    for (const [passengers, start, end] of trips) {\n        events.push([start, passengers]);    // pickup: add passengers\n        events.push([end, -passengers]);     // dropoff: remove passengers\n    }\n    \n    // Sort events by location\n    events.sort((a, b) => a[0] - b[0]);\n    \n    // Process events and track current passenger count\n    let currentPassengers = 0;\n    \n    for (const [location, change] of events) {\n        currentPassengers += change;\n        if (currentPassengers > capacity) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
    },
    "typescript": {
      "template": "function carPooling(trips: number[][], capacity: number): boolean {\n  \n}",
      "solution_text": "<p><strong>Car Pooling Solution using Difference Array:</strong></p><p>Track passenger count changes at pickup and dropoff points.</p><p><strong>Algorithm:</strong></p><ol><li>Create events for pickup (+passengers) and dropoff (-passengers)</li><li>Sort events by location</li><li>Process events and track current passenger count</li><li>Check if capacity is ever exceeded</li></ol><p><strong>Alternative: Difference Array</strong></p><ol><li>Use array to track passenger changes at each location</li><li>Increment at pickup, decrement at dropoff</li><li>Calculate running sum and check capacity</li></ol><p><strong>Time Complexity:</strong> O(n log n) for sorting or O(max_location) for difference array</p><p><strong>Space Complexity:</strong> O(n) or O(max_location)</p>",
      "solution_code": "function carPooling(trips: number[][], capacity: number): boolean {\n    // Create events: [location, passenger_change]\n    const events: [number, number][] = [];\n    \n    for (const [passengers, start, end] of trips) {\n        events.push([start, passengers]);    // pickup: add passengers\n        events.push([end, -passengers]);     // dropoff: remove passengers\n    }\n    \n    // Sort events by location\n    events.sort((a, b) => a[0] - b[0]);\n    \n    // Process events and track current passenger count\n    let currentPassengers = 0;\n    \n    for (const [location, change] of events) {\n        currentPassengers += change;\n        if (currentPassengers > capacity) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
    },
    "java": {
      "template": "class Solution {\n    public boolean carPooling(int[][] trips, int capacity) {\n        \n    }\n}",
      "solution_text": "<p><strong>Car Pooling Solution using Difference Array:</strong></p><p>Track passenger count changes at pickup and dropoff points.</p><p><strong>Algorithm:</strong></p><ol><li>Create events for pickup (+passengers) and dropoff (-passengers)</li><li>Sort events by location</li><li>Process events and track current passenger count</li><li>Check if capacity is ever exceeded</li></ol><p><strong>Alternative: Difference Array</strong></p><ol><li>Use array to track passenger changes at each location</li><li>Increment at pickup, decrement at dropoff</li><li>Calculate running sum and check capacity</li></ol><p><strong>Time Complexity:</strong> O(n log n) for sorting or O(max_location) for difference array</p><p><strong>Space Complexity:</strong> O(n) or O(max_location)</p>",
      "solution_code": "class Solution {\n    public boolean carPooling(int[][] trips, int capacity) {\n        // Create events: [location, passenger_change]\n        List<int[]> events = new ArrayList<>();\n        \n        for (int[] trip : trips) {\n            int passengers = trip[0], start = trip[1], end = trip[2];\n            events.add(new int[]{start, passengers});    // pickup: add passengers\n            events.add(new int[]{end, -passengers});     // dropoff: remove passengers\n        }\n        \n        // Sort events by location\n        Collections.sort(events, (a, b) -> Integer.compare(a[0], b[0]));\n        \n        // Process events and track current passenger count\n        int currentPassengers = 0;\n        \n        for (int[] event : events) {\n            int location = event[0], change = event[1];\n            currentPassengers += change;\n            if (currentPassengers > capacity) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "trips": [
          [4, 1, 2],
          [3, 2, 4]
        ],
        "capacity": 4
      },
      "output": true
    },
    {
      "id": 2,
      "input": {
        "trips": [
          [2, 1, 3],
          [3, 2, 4]
        ],
        "capacity": 4
      },
      "output": false
    }
  ]
}