{
  "filename": "palindromic-substrings",
  "title": "Palindromic Substrings",
  "keywords": [
    "palindromic",
    "substrings",
    "count",
    "expand",
    "center",
    "dynamic"
  ],
  "description": "<h2>Palindromic Substrings</h2><p>Given a string <code>s</code>, return <em>the number of palindromic substrings in it</em>.</p><p>A string is a <strong>palindrome</strong> when it reads the same backward as forward.</p><p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: s = \"abc\"<br>Output: 3<br>Explanation: Three palindromic strings: \"a\", \"b\", \"c\".</li><li><strong>Example 2:</strong><br>Input: s = \"aaa\"<br>Output: 6<br>Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".</li></ul><h3>Constraints:</h3><ul><li>1 <= s.length <= 1000</li><li>s consists of lowercase English letters.</li></ul>",
  "languages": {
    "python": {
      "template": "def countSubstrings(s):\n    ",
      "solution_text": "Expand around centers to count palindromes. Check both odd and even length palindromes.",
      "solution_code": "def countSubstrings(s):\n    count = 0\n    \n    def expand_around_center(left, right):\n        nonlocal count\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n    \n    for i in range(len(s)):\n        # Odd length palindromes\n        expand_around_center(i, i)\n        # Even length palindromes\n        expand_around_center(i, i + 1)\n    \n    return count"
    },
    "javascript": {
      "template": "function countSubstrings(s) {\n  \n}",
      "solution_text": "Expand around centers to count palindromes. Check both odd and even length palindromes.",
      "solution_code": "function countSubstrings(s) {\n    let count = 0;\n    \n    function expandAroundCenter(left, right) {\n        while (left >= 0 && right < s.length && s[left] === s[right]) {\n            count++;\n            left--;\n            right++;\n        }\n    }\n    \n    for (let i = 0; i < s.length; i++) {\n        // Odd length palindromes\n        expandAroundCenter(i, i);\n        // Even length palindromes\n        expandAroundCenter(i, i + 1);\n    }\n    \n    return count;\n}"
    },
    "typescript": {
      "template": "function countSubstrings(s: string): number {\n  \n}",
      "solution_text": "Expand around centers to count palindromes. Check both odd and even length palindromes.",
      "solution_code": "function countSubstrings(s: string): number {\n    let count = 0;\n    \n    function expandAroundCenter(left: number, right: number): void {\n        while (left >= 0 && right < s.length && s[left] === s[right]) {\n            count++;\n            left--;\n            right++;\n        }\n    }\n    \n    for (let i = 0; i < s.length; i++) {\n        // Odd length palindromes\n        expandAroundCenter(i, i);\n        // Even length palindromes\n        expandAroundCenter(i, i + 1);\n    }\n    \n    return count;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int countSubstrings(String s) {\n        \n    }\n}",
      "solution_text": "Expand around centers to count palindromes. Check both odd and even length palindromes.",
      "solution_code": "class Solution {\n    private int count = 0;\n    \n    public int countSubstrings(String s) {\n        count = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            // Odd length palindromes\n            expandAroundCenter(s, i, i);\n            // Even length palindromes\n            expandAroundCenter(s, i, i + 1);\n        }\n        \n        return count;\n    }\n    \n    private void expandAroundCenter(String s, int left, int right) {\n        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n            count++;\n            left--;\n            right++;\n        }\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "abc"
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "s": "aaa"
      },
      "output": 6
    }
  ]
}