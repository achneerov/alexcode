{
  "filename": "reverse-linked-list",
  "title": "Reverse Linked List",
  "keywords": [
    "reverse",
    "linked",
    "list",
    "iterative",
    "recursive",
    "pointers"
  ],
  "description": "<h2>Reverse Linked List</h2><p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: head = [1,2,3,4,5]<br>Output: [5,4,3,2,1]</li><li><strong>Example 2:</strong><br>Input: head = [1,2]<br>Output: [2,1]</li><li><strong>Example 3:</strong><br>Input: head = []<br>Output: []</li></ul><h3>Constraints:</h3><ul><li>The number of nodes in the list is the range [0, 5000].</li><li>-5000 <= Node.val <= 5000</li></ul>",
  "languages": {
    "python": {
      "template": "def reverseList(head):\n    ",
      "solution_text": "Use three pointers: prev, current, and next to reverse the links iteratively.",
      "solution_code": "def reverseList(head):\n    prev = None\n    current = head\n    \n    while current:\n        next_temp = current.next\n        current.next = prev\n        prev = current\n        current = next_temp\n    \n    return prev"
    },
    "javascript": {
      "template": "function reverseList(head) {\n  \n}",
      "solution_text": "Use three pointers: prev, current, and next to reverse the links iteratively.",
      "solution_code": "function reverseList(head) {\n    let prev = null;\n    let current = head;\n    \n    while (current !== null) {\n        const nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    \n    return prev;\n}"
    },
    "typescript": {
      "template": "function reverseList(head: ListNode | null): ListNode | null {\n  \n}",
      "solution_text": "Use three pointers: prev, current, and next to reverse the links iteratively.",
      "solution_code": "function reverseList(head: ListNode | null): ListNode | null {\n    let prev: ListNode | null = null;\n    let current = head;\n    \n    while (current !== null) {\n        const nextTemp = current.next;\n        current.next = prev;\n        prev = current;\n        current = nextTemp;\n    }\n    \n    return prev;\n}"
    },
    "java": {
      "template": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        \n    }\n}",
      "solution_text": "Use three pointers: prev, current, and next to reverse the links iteratively.",
      "solution_code": "class Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode current = head;\n        \n        while (current != null) {\n            ListNode nextTemp = current.next;\n            current.next = prev;\n            prev = current;\n            current = nextTemp;\n        }\n        \n        return prev;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "head": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "output": [
        5,
        4,
        3,
        2,
        1
      ]
    },
    {
      "id": 2,
      "input": {
        "head": [
          1,
          2
        ]
      },
      "output": [
        2,
        1
      ]
    },
    {
      "id": 3,
      "input": {
        "head": []
      },
      "output": []
    }
  ]
}