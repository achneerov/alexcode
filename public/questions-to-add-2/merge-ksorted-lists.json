{
  "filename": "merge-ksorted-lists",
  "title": "Merge k Sorted Lists",
  "keywords": [
    "merge",
    "sorted",
    "lists",
    "linked",
    "list",
    "heap",
    "divide",
    "conquer"
  ],
  "description": "<h2>Merge k Sorted Lists</h2><p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p><p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: lists = [[1,4,5],[1,3,4],[2,6]]<br>Output: [1,1,2,3,4,4,5,6]<br>Explanation: The linked-lists are:<br>[<br>  1->4->5,<br>  1->3->4,<br>  2->6<br>]<br>merging them into one sorted list:<br>1->1->2->3->4->4->5->6</li><li><strong>Example 2:</strong><br>Input: lists = []<br>Output: []</li><li><strong>Example 3:</strong><br>Input: lists = [[]]<br>Output: []</li></ul><h3>Constraints:</h3><ul><li>k == lists.length</li><li>0 <= k <= 10^4</li><li>0 <= lists[i].length <= 500</li><li>-10^4 <= lists[i][j] <= 10^4</li><li>lists[i] is sorted in ascending order.</li><li>The sum of lists[i].length will not exceed 10^4.</li></ul>",
  "languages": {
    "python": {
      "template": "def mergeKLists(lists):\n    ",
      "solution_text": "Use divide and conquer approach to merge lists pairwise, similar to merge sort.",
      "solution_code": "def mergeKLists(lists):\n    if not lists or len(lists) == 0:\n        return None\n    \n    def mergeTwoLists(l1, l2):\n        dummy = ListNode(0)\n        current = dummy\n        \n        while l1 and l2:\n            if l1.val <= l2.val:\n                current.next = l1\n                l1 = l1.next\n            else:\n                current.next = l2\n                l2 = l2.next\n            current = current.next\n        \n        current.next = l1 or l2\n        return dummy.next\n    \n    while len(lists) > 1:\n        mergedLists = []\n        \n        for i in range(0, len(lists), 2):\n            l1 = lists[i]\n            l2 = lists[i + 1] if (i + 1) < len(lists) else None\n            mergedLists.append(mergeTwoLists(l1, l2))\n        \n        lists = mergedLists\n    \n    return lists[0]"
    },
    "javascript": {
      "template": "function mergeKLists(lists) {\n  \n}",
      "solution_text": "Use divide and conquer approach to merge lists pairwise, similar to merge sort.",
      "solution_code": "function mergeKLists(lists) {\n    if (!lists || lists.length === 0) return null;\n    \n    function mergeTwoLists(l1, l2) {\n        const dummy = new ListNode(0);\n        let current = dummy;\n        \n        while (l1 && l2) {\n            if (l1.val <= l2.val) {\n                current.next = l1;\n                l1 = l1.next;\n            } else {\n                current.next = l2;\n                l2 = l2.next;\n            }\n            current = current.next;\n        }\n        \n        current.next = l1 || l2;\n        return dummy.next;\n    }\n    \n    while (lists.length > 1) {\n        const mergedLists = [];\n        \n        for (let i = 0; i < lists.length; i += 2) {\n            const l1 = lists[i];\n            const l2 = i + 1 < lists.length ? lists[i + 1] : null;\n            mergedLists.push(mergeTwoLists(l1, l2));\n        }\n        \n        lists = mergedLists;\n    }\n    \n    return lists[0];\n}"
    },
    "typescript": {
      "template": "function mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n  \n}",
      "solution_text": "Use divide and conquer approach to merge lists pairwise, similar to merge sort.",
      "solution_code": "function mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n    if (!lists || lists.length === 0) return null;\n    \n    function mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\n        const dummy = new ListNode(0);\n        let current = dummy;\n        \n        while (l1 && l2) {\n            if (l1.val <= l2.val) {\n                current.next = l1;\n                l1 = l1.next;\n            } else {\n                current.next = l2;\n                l2 = l2.next;\n            }\n            current = current.next;\n        }\n        \n        current.next = l1 || l2;\n        return dummy.next;\n    }\n    \n    while (lists.length > 1) {\n        const mergedLists: Array<ListNode | null> = [];\n        \n        for (let i = 0; i < lists.length; i += 2) {\n            const l1 = lists[i];\n            const l2 = i + 1 < lists.length ? lists[i + 1] : null;\n            mergedLists.push(mergeTwoLists(l1, l2));\n        }\n        \n        lists = mergedLists;\n    }\n    \n    return lists[0];\n}"
    },
    "java": {
      "template": "class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n    }\n}",
      "solution_text": "Use divide and conquer approach to merge lists pairwise, similar to merge sort.",
      "solution_code": "class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists == null || lists.length == 0) return null;\n        \n        while (lists.length > 1) {\n            List<ListNode> mergedLists = new ArrayList<>();\n            \n            for (int i = 0; i < lists.length; i += 2) {\n                ListNode l1 = lists[i];\n                ListNode l2 = i + 1 < lists.length ? lists[i + 1] : null;\n                mergedLists.add(mergeTwoLists(l1, l2));\n            }\n            \n            lists = mergedLists.toArray(new ListNode[0]);\n        }\n        \n        return lists[0];\n    }\n    \n    private ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n        \n        while (l1 != null && l2 != null) {\n            if (l1.val <= l2.val) {\n                current.next = l1;\n                l1 = l1.next;\n            } else {\n                current.next = l2;\n                l2 = l2.next;\n            }\n            current = current.next;\n        }\n        \n        current.next = l1 != null ? l1 : l2;\n        return dummy.next;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "lists": [
          [
            1,
            4,
            5
          ],
          [
            1,
            3,
            4
          ],
          [
            2,
            6
          ]
        ]
      },
      "output": [
        1,
        1,
        2,
        3,
        4,
        4,
        5,
        6
      ]
    },
    {
      "id": 2,
      "input": {
        "lists": []
      },
      "output": []
    },
    {
      "id": 3,
      "input": {
        "lists": [
          []
        ]
      },
      "output": []
    }
  ]
}