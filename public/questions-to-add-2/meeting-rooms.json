{
  "filename": "meeting-rooms",
  "title": "Meeting Rooms",
  "keywords": [
    "meeting",
    "rooms",
    "intervals",
    "overlap",
    "scheduling"
  ],
  "description": "<h2>Meeting Rooms</h2><p>Given an array of meeting time intervals where <code>intervals[i] = [starti, endi]</code>, determine if a person could attend all meetings.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: intervals = [[0,30],[5,10],[15,20]]<br>Output: false</li><li><strong>Example 2:</strong><br>Input: intervals = [[7,10],[2,4]]<br>Output: true</li></ul><h3>Constraints:</h3><ul><li>0 <= intervals.length <= 10^4</li><li>intervals[i].length == 2</li><li>0 <= starti < endi <= 10^6</li></ul>",
  "languages": {
    "python": {
      "template": "def canAttendMeetings(intervals):\n    ",
      "solution_text": "Sort intervals by start time and check if any two consecutive intervals overlap.",
      "solution_code": "def canAttendMeetings(intervals):\n    if not intervals:\n        return True\n    \n    # Sort by start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # Check for overlaps\n    for i in range(1, len(intervals)):\n        if intervals[i][0] < intervals[i-1][1]:\n            return False\n    \n    return True"
    },
    "javascript": {
      "template": "function canAttendMeetings(intervals) {\n  \n}",
      "solution_text": "Sort intervals by start time and check if any two consecutive intervals overlap.",
      "solution_code": "function canAttendMeetings(intervals) {\n    if (intervals.length === 0) return true;\n    \n    // Sort by start time\n    intervals.sort((a, b) => a[0] - b[0]);\n    \n    // Check for overlaps\n    for (let i = 1; i < intervals.length; i++) {\n        if (intervals[i][0] < intervals[i-1][1]) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
    },
    "typescript": {
      "template": "function canAttendMeetings(intervals: number[][]): boolean {\n  \n}",
      "solution_text": "Sort intervals by start time and check if any two consecutive intervals overlap.",
      "solution_code": "function canAttendMeetings(intervals: number[][]): boolean {\n    if (intervals.length === 0) return true;\n    \n    // Sort by start time\n    intervals.sort((a, b) => a[0] - b[0]);\n    \n    // Check for overlaps\n    for (let i = 1; i < intervals.length; i++) {\n        if (intervals[i][0] < intervals[i-1][1]) {\n            return false;\n        }\n    }\n    \n    return true;\n}"
    },
    "java": {
      "template": "class Solution {\n    public boolean canAttendMeetings(int[][] intervals) {\n        \n    }\n}",
      "solution_text": "Sort intervals by start time and check if any two consecutive intervals overlap.",
      "solution_code": "class Solution {\n    public boolean canAttendMeetings(int[][] intervals) {\n        if (intervals.length == 0) return true;\n        \n        // Sort by start time\n        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);\n        \n        // Check for overlaps\n        for (int i = 1; i < intervals.length; i++) {\n            if (intervals[i][0] < intervals[i-1][1]) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "intervals": [
          [
            0,
            30
          ],
          [
            5,
            10
          ],
          [
            15,
            20
          ]
        ]
      },
      "output": false
    },
    {
      "id": 2,
      "input": {
        "intervals": [
          [
            7,
            10
          ],
          [
            2,
            4
          ]
        ]
      },
      "output": true
    },
    {
      "id": 3,
      "input": {
        "intervals": []
      },
      "output": true
    }
  ]
}