{
  "filename": "container-with-most-water",
  "title": "Container With Most Water",
  "keywords": [
    "container",
    "water",
    "most",
    "area",
    "two",
    "pointers",
    "height"
  ],
  "description": "<h2>Container With Most Water</h2><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return the maximum amount of water a container can store.</p><p><strong>Notice</strong> that you may not slant the container.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: height = [1,8,6,2,5,4,8,3,7]<br>Output: 49<br>Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</li><li><strong>Example 2:</strong><br>Input: height = [1,1]<br>Output: 1</li></ul><h3>Constraints:</h3><ul><li>n == height.length</li><li>2 <= n <= 10<sup>5</sup></li><li>0 <= height[i] <= 10<sup>4</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def maxArea(height):\n    ",
      "solution_text": "Use two pointers from both ends. Move the pointer with smaller height inward.",
      "solution_code": "def maxArea(height):\n    left, right = 0, len(height) - 1\n    max_area = 0\n    \n    while left < right:\n        width = right - left\n        current_area = width * min(height[left], height[right])\n        max_area = max(max_area, current_area)\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_area"
    },
    "javascript": {
      "template": "function maxArea(height) {\n  \n}",
      "solution_text": "Use two pointers from both ends. Move the pointer with smaller height inward.",
      "solution_code": "function maxArea(height) {\n    let left = 0;\n    let right = height.length - 1;\n    let maxArea = 0;\n    \n    while (left < right) {\n        const width = right - left;\n        const currentArea = width * Math.min(height[left], height[right]);\n        maxArea = Math.max(maxArea, currentArea);\n        \n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxArea;\n}"
    },
    "typescript": {
      "template": "function maxArea(height: number[]): number {\n  \n}",
      "solution_text": "Use two pointers from both ends. Move the pointer with smaller height inward.",
      "solution_code": "function maxArea(height: number[]): number {\n    let left = 0;\n    let right = height.length - 1;\n    let maxArea = 0;\n    \n    while (left < right) {\n        const width = right - left;\n        const currentArea = width * Math.min(height[left], height[right]);\n        maxArea = Math.max(maxArea, currentArea);\n        \n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxArea;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}",
      "solution_text": "Use two pointers from both ends. Move the pointer with smaller height inward.",
      "solution_code": "class Solution {\n    public int maxArea(int[] height) {\n        int left = 0;\n        int right = height.length - 1;\n        int maxArea = 0;\n        \n        while (left < right) {\n            int width = right - left;\n            int currentArea = width * Math.min(height[left], height[right]);\n            maxArea = Math.max(maxArea, currentArea);\n            \n            if (height[left] < height[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        \n        return maxArea;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "height": [
          1,
          8,
          6,
          2,
          5,
          4,
          8,
          3,
          7
        ]
      },
      "output": 49
    },
    {
      "id": 2,
      "input": {
        "height": [
          1,
          1
        ]
      },
      "output": 1
    },
    {
      "id": 3,
      "input": {
        "height": [
          1,
          2,
          1
        ]
      },
      "output": 2
    }
  ]
}