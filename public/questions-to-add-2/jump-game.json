{
  "filename": "jump-game",
  "title": "Jump Game",
  "keywords": [
    "jump",
    "game",
    "greedy",
    "array",
    "reach",
    "maximum"
  ],
  "description": "<h2>Jump Game</h2><p>You are given an integer array <code>nums</code>. You are initially positioned at the array's <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p><p>Return <code>true</code> if you can reach the last index, or <code>false</code> otherwise.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: nums = [2,3,1,1,4]<br>Output: true<br>Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</li><li><strong>Example 2:</strong><br>Input: nums = [3,2,1,0,4]<br>Output: false<br>Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</li></ul><h3>Constraints:</h3><ul><li>1 <= nums.length <= 10<sup>4</sup></li><li>0 <= nums[i] <= 10<sup>5</sup></li></ul>",
  "languages": {
    "python": {
      "template": "def canJump(nums):\n    ",
      "solution_text": "Use greedy approach. Keep track of the maximum reachable index and check if we can reach the end.",
      "solution_code": "def canJump(nums):\n    max_reach = 0\n    \n    for i in range(len(nums)):\n        if i > max_reach:\n            return False\n        \n        max_reach = max(max_reach, i + nums[i])\n        \n        if max_reach >= len(nums) - 1:\n            return True\n    \n    return True"
    },
    "javascript": {
      "template": "function canJump(nums) {\n  \n}",
      "solution_text": "Use greedy approach. Keep track of the maximum reachable index and check if we can reach the end.",
      "solution_code": "function canJump(nums) {\n    let maxReach = 0;\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (i > maxReach) {\n            return false;\n        }\n        \n        maxReach = Math.max(maxReach, i + nums[i]);\n        \n        if (maxReach >= nums.length - 1) {\n            return true;\n        }\n    }\n    \n    return true;\n}"
    },
    "typescript": {
      "template": "function canJump(nums: number[]): boolean {\n  \n}",
      "solution_text": "Use greedy approach. Keep track of the maximum reachable index and check if we can reach the end.",
      "solution_code": "function canJump(nums: number[]): boolean {\n    let maxReach = 0;\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (i > maxReach) {\n            return false;\n        }\n        \n        maxReach = Math.max(maxReach, i + nums[i]);\n        \n        if (maxReach >= nums.length - 1) {\n            return true;\n        }\n    }\n    \n    return true;\n}"
    },
    "java": {
      "template": "class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}",
      "solution_text": "Use greedy approach. Keep track of the maximum reachable index and check if we can reach the end.",
      "solution_code": "class Solution {\n    public boolean canJump(int[] nums) {\n        int maxReach = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            if (i > maxReach) {\n                return false;\n            }\n            \n            maxReach = Math.max(maxReach, i + nums[i]);\n            \n            if (maxReach >= nums.length - 1) {\n                return true;\n            }\n        }\n        \n        return true;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": [
          2,
          3,
          1,
          1,
          4
        ]
      },
      "output": true
    },
    {
      "id": 2,
      "input": {
        "nums": [
          3,
          2,
          1,
          0,
          4
        ]
      },
      "output": false
    },
    {
      "id": 3,
      "input": {
        "nums": [
          0
        ]
      },
      "output": true
    }
  ]
}