{
  "filename": "climbing-stairs",
  "title": "Climbing Stairs",
  "keywords": [
    "climbing",
    "stairs",
    "fibonacci",
    "dynamic",
    "programming",
    "steps"
  ],
  "description": "<h2>Climbing Stairs</h2><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: n = 2<br>Output: 2<br>Explanation: There are two ways to climb to the top.<br>1. 1 step + 1 step<br>2. 2 steps</li><li><strong>Example 2:</strong><br>Input: n = 3<br>Output: 3<br>Explanation: There are three ways to climb to the top.<br>1. 1 step + 1 step + 1 step<br>2. 1 step + 2 steps<br>3. 2 steps + 1 step</li></ul><h3>Constraints:</h3><ul><li>1 <= n <= 45</li></ul>",
  "languages": {
    "python": {
      "template": "def climbStairs(n):\n    ",
      "solution_text": "This is essentially the Fibonacci sequence. Use dynamic programming or space-optimized approach.",
      "solution_code": "def climbStairs(n):\n    if n <= 2:\n        return n\n    \n    prev2, prev1 = 1, 2\n    \n    for i in range(3, n + 1):\n        current = prev1 + prev2\n        prev2, prev1 = prev1, current\n    \n    return prev1"
    },
    "javascript": {
      "template": "function climbStairs(n) {\n  \n}",
      "solution_text": "This is essentially the Fibonacci sequence. Use dynamic programming or space-optimized approach.",
      "solution_code": "function climbStairs(n) {\n    if (n <= 2) return n;\n    \n    let prev2 = 1;\n    let prev1 = 2;\n    \n    for (let i = 3; i <= n; i++) {\n        const current = prev1 + prev2;\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return prev1;\n}"
    },
    "typescript": {
      "template": "function climbStairs(n: number): number {\n  \n}",
      "solution_text": "This is essentially the Fibonacci sequence. Use dynamic programming or space-optimized approach.",
      "solution_code": "function climbStairs(n: number): number {\n    if (n <= 2) return n;\n    \n    let prev2 = 1;\n    let prev1 = 2;\n    \n    for (let i = 3; i <= n; i++) {\n        const current = prev1 + prev2;\n        prev2 = prev1;\n        prev1 = current;\n    }\n    \n    return prev1;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}",
      "solution_text": "This is essentially the Fibonacci sequence. Use dynamic programming or space-optimized approach.",
      "solution_code": "class Solution {\n    public int climbStairs(int n) {\n        if (n <= 2) return n;\n        \n        int prev2 = 1;\n        int prev1 = 2;\n        \n        for (int i = 3; i <= n; i++) {\n            int current = prev1 + prev2;\n            prev2 = prev1;\n            prev1 = current;\n        }\n        \n        return prev1;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "n": 2
      },
      "output": 2
    },
    {
      "id": 2,
      "input": {
        "n": 3
      },
      "output": 3
    },
    {
      "id": 3,
      "input": {
        "n": 4
      },
      "output": 5
    }
  ]
}