{
  "filename": "number-of-islands",
  "title": "Number of Islands",
  "keywords": [
    "number",
    "islands",
    "dfs",
    "bfs",
    "grid",
    "connected",
    "components"
  ],
  "description": "<h2>Number of Islands</h2><p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>'1'</code>s (land) and <code>'0'</code>s (water), return <em>the number of islands</em>.</p><p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: grid = [<br>  [\"1\",\"1\",\"1\",\"1\",\"0\"],<br>  [\"1\",\"1\",\"0\",\"1\",\"0\"],<br>  [\"1\",\"1\",\"0\",\"0\",\"0\"],<br>  [\"0\",\"0\",\"0\",\"0\",\"0\"]<br>]<br>Output: 1</li><li><strong>Example 2:</strong><br>Input: grid = [<br>  [\"1\",\"1\",\"0\",\"0\",\"0\"],<br>  [\"1\",\"1\",\"0\",\"0\",\"0\"],<br>  [\"0\",\"0\",\"1\",\"0\",\"0\"],<br>  [\"0\",\"0\",\"0\",\"1\",\"1\"]<br>]<br>Output: 3</li></ul><h3>Constraints:</h3><ul><li>m == grid.length</li><li>n == grid[i].length</li><li>1 <= m, n <= 300</li><li>grid[i][j] is '0' or '1'.</li></ul>",
  "languages": {
    "python": {
      "template": "def numIslands(grid):\n    ",
      "solution_text": "Use DFS to explore each island. When finding a '1', increment count and mark all connected land as visited.",
      "solution_code": "def numIslands(grid):\n    if not grid or not grid[0]:\n        return 0\n    \n    rows, cols = len(grid), len(grid[0])\n    islands = 0\n    \n    def dfs(r, c):\n        if (r < 0 or r >= rows or c < 0 or c >= cols or \n            grid[r][c] == \"0\"):\n            return\n        \n        grid[r][c] = \"0\"  # Mark as visited\n        \n        # Explore all 4 directions\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == \"1\":\n                islands += 1\n                dfs(r, c)\n    \n    return islands"
    },
    "javascript": {
      "template": "function numIslands(grid) {\n  \n}",
      "solution_text": "Use DFS to explore each island. When finding a '1', increment count and mark all connected land as visited.",
      "solution_code": "function numIslands(grid) {\n    if (!grid || !grid[0]) return 0;\n    \n    const rows = grid.length;\n    const cols = grid[0].length;\n    let islands = 0;\n    \n    function dfs(r, c) {\n        if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c] === \"0\") {\n            return;\n        }\n        \n        grid[r][c] = \"0\"; // Mark as visited\n        \n        // Explore all 4 directions\n        dfs(r + 1, c);\n        dfs(r - 1, c);\n        dfs(r, c + 1);\n        dfs(r, c - 1);\n    }\n    \n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n            if (grid[r][c] === \"1\") {\n                islands++;\n                dfs(r, c);\n            }\n        }\n    }\n    \n    return islands;\n}"
    },
    "typescript": {
      "template": "function numIslands(grid: string[][]): number {\n  \n}",
      "solution_text": "Use DFS to explore each island. When finding a '1', increment count and mark all connected land as visited.",
      "solution_code": "function numIslands(grid: string[][]): number {\n    if (!grid || !grid[0]) return 0;\n    \n    const rows = grid.length;\n    const cols = grid[0].length;\n    let islands = 0;\n    \n    function dfs(r: number, c: number): void {\n        if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c] === \"0\") {\n            return;\n        }\n        \n        grid[r][c] = \"0\"; // Mark as visited\n        \n        // Explore all 4 directions\n        dfs(r + 1, c);\n        dfs(r - 1, c);\n        dfs(r, c + 1);\n        dfs(r, c - 1);\n    }\n    \n    for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n            if (grid[r][c] === \"1\") {\n                islands++;\n                dfs(r, c);\n            }\n        }\n    }\n    \n    return islands;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int numIslands(char[][] grid) {\n        \n    }\n}",
      "solution_text": "Use DFS to explore each island. When finding a '1', increment count and mark all connected land as visited.",
      "solution_code": "class Solution {\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0) return 0;\n        \n        int rows = grid.length;\n        int cols = grid[0].length;\n        int islands = 0;\n        \n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                if (grid[r][c] == '1') {\n                    islands++;\n                    dfs(grid, r, c);\n                }\n            }\n        }\n        \n        return islands;\n    }\n    \n    private void dfs(char[][] grid, int r, int c) {\n        if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || grid[r][c] == '0') {\n            return;\n        }\n        \n        grid[r][c] = '0'; // Mark as visited\n        \n        // Explore all 4 directions\n        dfs(grid, r + 1, c);\n        dfs(grid, r - 1, c);\n        dfs(grid, r, c + 1);\n        dfs(grid, r, c - 1);\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "grid": [
          [
            "1",
            "1",
            "1",
            "1",
            "0"
          ],
          [
            "1",
            "1",
            "0",
            "1",
            "0"
          ],
          [
            "1",
            "1",
            "0",
            "0",
            "0"
          ],
          [
            "0",
            "0",
            "0",
            "0",
            "0"
          ]
        ]
      },
      "output": 1
    },
    {
      "id": 2,
      "input": {
        "grid": [
          [
            "1",
            "1",
            "0",
            "0",
            "0"
          ],
          [
            "1",
            "1",
            "0",
            "0",
            "0"
          ],
          [
            "0",
            "0",
            "1",
            "0",
            "0"
          ],
          [
            "0",
            "0",
            "0",
            "1",
            "1"
          ]
        ]
      },
      "output": 3
    }
  ]
}