{
  "filename": "maximum-depth-of-binary-tree",
  "title": "Maximum Depth of Binary Tree",
  "keywords": [
    "maximum",
    "depth",
    "binary",
    "tree",
    "recursive",
    "dfs"
  ],
  "description": "<h2>Maximum Depth of Binary Tree</h2><p>Given the <code>root</code> of a binary tree, return its maximum depth.</p><p>A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><h3>Examples:</h3><ul><li><strong>Example 1:</strong><br>Input: root = [3,9,20,null,null,15,7]<br>Output: 3</li><li><strong>Example 2:</strong><br>Input: root = [1,null,2]<br>Output: 2</li></ul><h3>Constraints:</h3><ul><li>The number of nodes in the tree is in the range [0, 10<sup>4</sup>].</li><li>-100 <= Node.val <= 100</li></ul>",
  "languages": {
    "python": {
      "template": "def maxDepth(root):\n    ",
      "solution_text": "Use recursion to find the maximum depth of left and right subtrees.",
      "solution_code": "def maxDepth(root):\n    if not root:\n        return 0\n    \n    left_depth = maxDepth(root.left)\n    right_depth = maxDepth(root.right)\n    \n    return max(left_depth, right_depth) + 1"
    },
    "javascript": {
      "template": "function maxDepth(root) {\n  \n}",
      "solution_text": "Use recursion to find the maximum depth of left and right subtrees.",
      "solution_code": "function maxDepth(root) {\n    if (!root) return 0;\n    \n    const leftDepth = maxDepth(root.left);\n    const rightDepth = maxDepth(root.right);\n    \n    return Math.max(leftDepth, rightDepth) + 1;\n}"
    },
    "typescript": {
      "template": "function maxDepth(root: TreeNode | null): number {\n  \n}",
      "solution_text": "Use recursion to find the maximum depth of left and right subtrees.",
      "solution_code": "function maxDepth(root: TreeNode | null): number {\n    if (!root) return 0;\n    \n    const leftDepth = maxDepth(root.left);\n    const rightDepth = maxDepth(root.right);\n    \n    return Math.max(leftDepth, rightDepth) + 1;\n}"
    },
    "java": {
      "template": "class Solution {\n    public int maxDepth(TreeNode root) {\n        \n    }\n}",
      "solution_text": "Use recursion to find the maximum depth of left and right subtrees.",
      "solution_code": "class Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) return 0;\n        \n        int leftDepth = maxDepth(root.left);\n        int rightDepth = maxDepth(root.right);\n        \n        return Math.max(leftDepth, rightDepth) + 1;\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "root": [
          3,
          9,
          20,
          null,
          null,
          15,
          7
        ]
      },
      "output": 3
    },
    {
      "id": 2,
      "input": {
        "root": [
          1,
          null,
          2
        ]
      },
      "output": 2
    }
  ]
}