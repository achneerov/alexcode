{
  "description": "<h2>Valid Anagram</h2><h3>Problem</h3><p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p><p>An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p><h3>Examples:</h3><ul><li>If <code>s = \"anagram\"</code> and <code>t = \"nagaram\"</code>, the output should be <code>true</code>.</li><li>If <code>s = \"rat\"</code> and <code>t = \"car\"</code>, the output should be <code>false</code>.</li></ul>",
  "solution": "<p>The most efficient approach is to count character frequencies:</p><pre><code>def function(s, t):\n    # If lengths are different, they can't be anagrams\n    if len(s) != len(t):\n        return False\n    \n    # Create dictionaries to track character counts\n    char_count_s = {}\n    char_count_t = {}\n    \n    # Count characters in both strings\n    for i in range(len(s)):\n        char_count_s[s[i]] = char_count_s.get(s[i], 0) + 1\n        char_count_t[t[i]] = char_count_t.get(t[i], 0) + 1\n    \n    # Compare the character counts\n    return char_count_s == char_count_t\n    \n    # Alternative solution using sorting:\n    # return sorted(s) == sorted(t)</code></pre>",
  "function_params_names": ["s", "t"],
  "test_cases": [
    {
      "id": 1,
      "input": {
        "s": "anagram",
        "t": "nagaram"
      },
      "output": true
    },
    {
      "id": 2,
      "input": {
        "s": "rat",
        "t": "car"
      },
      "output": false
    },
    {
      "id": 3,
      "input": {
        "s": "",
        "t": ""
      },
      "output": true
    },
    {
      "id": 4,
      "input": {
        "s": "abc",
        "t": "ab"
      },
      "output": false
    },
    {
      "id": 5,
      "input": {
        "s": "aab",
        "t": "aba"
      },
      "output": true
    },
    {
      "id": 6,
      "input": {
        "s": "Anagram",
        "t": "nagaram"
      },
      "output": false
    },
    {
      "id": 7,
      "input": {
        "s": "a",
        "t": "a"
      },
      "output": true
    },
    {
      "id": 8,
      "input": {
        "s": "a!b@c#",
        "t": "c#b@a!"
      },
      "output": true
    },
    {
      "id": 9,
      "input": {
        "s": "conversation",
        "t": "conservation"
      },
      "output": true
    },
    {
      "id": 10,
      "input": {
        "s": "listen",
        "t": "silent"
      },
      "output": true
    }
  ]
}
