{
  "filename": "two-integer-sum",
  "title": "Two Sum",
  "keywords": [
    "two",
    "sum",
    "leetcode",
    "given",
    "array",
    "integers",
    "nums",
    "integer",
    "target",
    "return"
  ],
  "description": "<h2>Two Sum</h2><p>Leetcode 1. Two Sum</p><p></p><p>Given an array of integers `nums` and an integer `target`, return the indices `i` and `j` such that `nums[i] + nums[j] == target` and `i != j`.</p><p>    </p><p>You may assume that *every* input has exactly one pair of indices `i` and `j` that satisfy the condition.</p><p></p><p>Return the answer with the smaller index first.</p><h3>Examples:</h3><ul><li>Input: <br>nums = [3,4,5,6], target = 7<br><br>Output: [0,1]<br>`nums[0] + nums[1] == 7`, so we return `[0, 1]`.</li><li>Input: nums = [4,5,6], target = 10<br><br>Output: [0,2]</li><li>Input: nums = [5,5], target = 10<br><br>Output: [0,1]</li></ul><h3>Constraints:</h3><ul><li> `2 <= nums.length <= 1000`</li><li> `-10,000,000 <= nums[i] <= 10,000,000`</li><li> `-10,000,000 <= target <= 10,000,000`</li></ul>",
  "languages": {
    "python": {
      "template": "def twoSum(nums, target):\n    ",
      "solution_text": "Use a hash map to store numbers we've seen and their indices. For each number, calculate its complement (target - current number) and check if it exists in our hash map. This achieves O(n) time complexity.",
      "solution_code": "def twoSum(nums, target):\n    seen = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        \n        if complement in seen:\n            return [seen[complement], i]\n        \n        seen[num] = i\n    \n    return []"
    },
    "javascript": {
      "template": "function twoSum(nums, target) {\n  \n}",
      "solution_text": "Use a Map to store numbers we've seen and their indices. For each number, calculate its complement (target - current number) and check if it exists in our map. This achieves O(n) time complexity.",
      "solution_code": "function twoSum(nums, target) {\n    const seen = new Map();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (seen.has(complement)) {\n            return [seen.get(complement), i];\n        }\n        \n        seen.set(nums[i], i);\n    }\n    \n    return [];\n}"
    },
    "typescript": {
      "template": "function twoSum(nums: number[], target: number): number[] {\n  \n}",
      "solution_text": "Use a Map to store numbers we've seen and their indices. For each number, calculate its complement (target - current number) and check if it exists in our map. This achieves O(n) time complexity. TypeScript type annotations are automatically stripped during execution.",
      "solution_code": "function twoSum(nums: number[], target: number): number[] {\n    const seen = new Map<number, number>();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (seen.has(complement)) {\n            return [seen.get(complement), i];\n        }\n        \n        seen.set(nums[i], i);\n    }\n    \n    return [];\n}"
    },
    "java": {
      "template": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
      "solution_text": "Use a HashMap to store numbers we've seen and their indices. For each number, calculate its complement (target - current number) and check if it exists in our HashMap. This achieves O(n) time complexity.",
      "solution_code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> seen = new HashMap<>();\n        \n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            \n            if (seen.containsKey(complement)) {\n                return new int[]{seen.get(complement), i};\n            }\n            \n            seen.put(nums[i], i);\n        }\n        \n        return new int[]{};\n    }\n}"
    }
  },
  "order_matters": false,
  "test_cases": [
    {
      "id": 1,
      "input": {
        "nums": "[4",
        "target": 10
      },
      "output": [
        0,
        2
      ]
    },
    {
      "id": 2,
      "input": {
        "nums": "[5",
        "target": 10
      },
      "output": [
        0,
        1
      ]
    }
  ]
}